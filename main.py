from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery
import markups
import texts
import time
import pymysql
from config import host, user_name, password, db_name
import re
from openpyxl import load_workbook
from fbo import excel
import ul_l
import calc
import gspread
import datetime
import sk
import json
import aiocron


TOKEN = ''

bot = Bot(TOKEN, parse_mode='html')
db = Dispatcher(bot)

gc = gspread.service_account(filename='retail-397705-2cb2125124db.json')
sh = gc.open_by_url("https://docs.google.com/spreadsheets/d/1c389riVHBioK2N9elinFl6iqxN_OFTo00EXaipvzN-w")


def update(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                connection.commit()
                return 0

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–û–¢–ú–ï–ù–ê</b>'

def create(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                connection.commit()
                return 0

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–û–¢–ú–ï–ù–ê</b>'

def selone(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                return cursor.fetchone()

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–û–¢–ú–ï–ù–ê</b>'

def selist(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                return cursor.fetchall()

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–û–¢–ú–ï–ù–ê</b>'

def defaul_values(id_user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cur:
                cur.execute(f"UPDATE users SET word_5 = ' ', calc_box = 0, price = 0, height = 0, height_flag = 0, length1 = 0, "
                            f"length_flag = 0, width = 0, width_flag = 0, min_price = 0, minus_item2 = 0, "
                            f"xl_ul = 0, xl_ul_text = '', xl_tel = 0, xl_tel_text = 0, xl_type = 0, "
                            f"xl_type_text = '', xl_count_type = 0, xl_count_type_text = 0, xl_mark = 0, "
                            f"xl_mark_text = '', xl_pack = 0, xl_pack_text = '', xl_comment = 0, "
                            f"xl_comment_text = '', xl_city = 0, xl_city_text = '', xl_count_box = 0, "
                            f"xl_count_box_text = 0, xl_count_items = 0, xl_count_items_text = '', "
                            f"xl_comment_city = 0, xl_comment_city_text = '', xl_markbox = 0, xl_markbox_text = '', "
                            f"logistic = 0, ff = 0, new_id_user = 0, new_id_user_text = '', new_name_user = 0, "
                            f"remove_user = 0, fbo_15 = 0, new_car_city = 0, new_car_plan_start = 0, "
                            f"new_car_plan_end = 0, car_drive = 0, num_car = 0, drive_num = 0, gate = 0, "
                            f"find_car = 0, car_city = 0, chcar = 0, del_car = 0, find_zakaz = 0, sumpd = 0, "
                            f"countpd = 0, text_user = 0, id_fbo = 0, new_car_city_text = '', zak_day = 0, "
                            f"zak_mon = 0, zak_year = 0, ef_day = 0, ef_mon = 0, ef_year = 0, zabor = 0, "
                            f"ed_day = 0, ed_mon = 0, ed_year = 0, prib_day = 0, prib_mon = 0, prib_year = 0, "
                            f"fbo_16 = 0, chcar_2 = 0, remove_user_adm = 0, fbo_11 = 0, fbo_18 = 0, fbo_18_1 = 0, "
                            f"gate_2 = 0, find_car = 0, find_car_4 = 0, weight = 0, count_pal_flag = 0, "
                            f"max_id_item = 0, add_set_0 = 0, add_set_1 = 0, add_set_4 = 0, "
                            f"add_set_5 = 0, add_set_6 = 0, add_set_7 = 0, add_set_8 = 0, add_set_9 = 0, "
                            f"add_set_10 = 0, add_set_11 = 0, add_set_12 = 0, add_set_13 = 0, find_item = 0, "
                            f"what_in_box = 0, choose_ul = '', edit_item = 0, all_edit_item = 0, choose_id = '', "
                            f"choose_pr = '', edit_pr = 0, add_ul = 0, plus_new_sell = 0, plus_new_sell2 = 0, "
                            f"plus_new_sell3 = 0, count_wb = 0, count_ozon = 0, edit_box = 0, edit_box_item = 0, "
                            f"choose_box = '', edit_box_item_add = 0, find_item_id = 0, edit_ul_2 = 0, "
                            f"new_id_user = 0, new_id_user_text = '', new_name_user = 0, remove_user = 0, "
                            f"plus_new_sell4 = 0, text_user = 0, count_wb_60 = 0, count_ozon_60 = 0, "
                            f"count_wb_120 = 0, count_ozon_120 = 0, count_wb_max = 0, count_ozon_max = 0, "
                            f"plus_new_sell5 = 0, plus_new_sell6 = 0, plus_new_sell7 = 0, plus_new_sell8 = 0, "
                            f"plus_new_sell9 = 0, remove_user_adm = 0, find_item2 = 0, choose_ul_id = 0, act_sk = ' ', "
                            f"act_log = ' ', edit_log = ' ', act_retail = ' ', act_wood = ' ' WHERE id_user = '{id_user}'")
                connection.commit()
                return 0

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ <b>–û–¢–ú–ï–ù–ê</b>'

async def startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


@db.message_handler(commands='info')
async def info_command(message: types.Message):
    id_user_get = f'`{message.chat.id}`'
    await message.answer(text=id_user_get, parse_mode='Markdown')

@db.message_handler(commands='message')
async def info_command(message: types.Message):
    user = message.chat.id
    await message.answer(text=message, parse_mode='HTML')

@db.message_handler(commands='test1')
async def info_command(message: types.Message):
    delta_1 = datetime.timedelta(hours=5)
    now = datetime.datetime.now()

    name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞—Ä—Ç 2024"

    worksheet_2 = sh.worksheet(name_list)
    num_row = int(now.day) + 1

    workers = ['–ê–π–Ω—É—Ä', '–†–æ–º–∞', '–ê–±—É–±–µ–∫']
    rast = 90
    mishk = 2
    razgr = 1

    mes = '‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n\n–†–∞–±–æ—Ç–∞–ª–∏: '

    for worker in workers:
        mes += f'*{worker} *'

    acp = f'A{num_row}'
    acd = f'B{num_row}'

    plan = worksheet_2.acell(acp).value
    dop = float(worksheet_2.acell(acd).value[2:].replace(',', '.'))

    chs = float(worksheet_2.acell('C34').value[2:].replace(',', '.'))
    chm = float(worksheet_2.acell('C35').value[2:].replace(',', '.'))
    zav = float(worksheet_2.acell('C36').value[2:].replace(',', '.'))
    nght = float(worksheet_2.acell('C37').value[2:].replace(',', '.'))
    razs = float(worksheet_2.acell('C38').value[2:].replace(',', '.'))

    mes += f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' \
           f'\nüê• –°–¥–µ–ª–∞–Ω–æ —Ä–∞—Å—Ç—É—â–∏—Ö: *{rast}*' \
           f'\n\n–ü–ª–∞–Ω: *{plan}*' \
           f'\n–°—É–º–º–∞ –∑–∞ –æ–¥–Ω–æ –¥–æ–ø. –∏–∑–¥–µ–ª–∏–µ: *{dop} —Ä—É–±.*' \
           f'\n–°—É–º–º–∞ –∑–∞ –¥–æ–ø. –∏–∑–¥–µ–ª–∏—è: *{(int(rast) - int(plan)) * dop} —Ä—É–±.*' \
           f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' \
           f'\nüì¶ –£–ø–∞–∫–æ–≤–∞–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: *{mishk}*' \
           f'\n\n–°—É–º–º–∞ –∑–∞ –æ–¥–∏–Ω –≤–æ–∑–≤—Ä–∞—Ç: *{zav} —Ä—É–±.*' \
           f'\n–°—É–º–º–∞ –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç—ã: *{int(mishk) * zav} —Ä—É–±.*' \
           f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' \
           f'\nüöö –†–∞–∑–≥—Ä—É–∑–æ–∫: *{razgr}*' \
           f'\n\n–°—É–º–º–∞ –∑–∞ –æ–¥–Ω—É —Ä–∞–∑–≥—Ä—É–∑–∫—É: *{razs} —Ä—É–±.*' \
           f'\n–°—É–º–º–∞ –∑–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{int(razgr) * razs} —Ä—É–±.*'


    await bot.send_message(chat_id=-1002146643966, text=mes, message_thread_id=2111, parse_mode='Markdown')


@db.message_handler(commands='start')
async def start_command(message: types.Message):
    user = message.chat.id
    if selone(f"SELECT id_user FROM users WHERE id_user = '{user}'", user) is None:
        await message.answer(text=texts.start_text)
    else:
        admin_list = selone(f"SELECT id_user FROM users WHERE id_user = '{user}'", user)
        if admin_list is not None:
            await message.answer(text=texts.menu_name, reply_markup=markups.menu_admin)


@db.message_handler(content_types=['photo'])
async def handle_docs_photo(message):
    user = message.chat.id
    if user == -1001933713976 or user == -984607796 or user == -1002146643966:
        pass
    elif 'brk_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
        file_id = message.photo[-1].file_id

        object_name = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1]
        object_count = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[2]
        update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)

        name_objects = selist(f"SELECT * FROM warehouse_c", user)
        count_obj = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '{object_name}'", user)['count_item']


        for o in name_objects:
            if o["name_item"] == object_name:
                update(f"UPDATE warehouse_c SET count_item = '{int(count_obj) - int(object_count)}' WHERE name_item = '{object_name}'", user)

        mes = f'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: *{object_name}*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{object_count}*'
        await bot.send_photo(chat_id=-1002146643966, photo=file_id, caption=mes, message_thread_id=1500, parse_mode='Markdown')

        if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
            await message.answer(text='–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É –≤ –¶–µ—Ö—É –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup=markups.menu_count_retail_n)
        elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
            await message.answer(text='–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É –≤ –¶–µ—Ö—É –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup=markups.menu_count_retail_b)




    else:
        try:
            await message.answer(text=message, parse_mode='HTML')
        except Exception as e:
            await message.answer(text=e)

@db.message_handler(content_types=types.ContentType.CONTACT)
async def contacts(message: types.Message):
    user = message.chat.id
    await bot.send_contact(chat_id=user, phone_number='+79872560706', first_name='–†–æ–º–∞–Ω')

@db.pre_checkout_query_handler()
async def pre_check(pcq: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pcq.id, ok=True)
    mes = f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É {pcq.total_amount // 100} {pcq.currency}'
    user = pcq.from_user.id
    await bot.send_message(chat_id=user, text=pcq.invoice_payload)
    await bot.send_message(chat_id=user, text=mes)
    await bot.send_message(chat_id=user, text='–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª')

@db.callback_query_handler()
async def action_callback(callback: types.CallbackQuery):
    user = callback.message.chat.id
    if callback.data == 'add_man':
        new_id_user_text = selone(f"SELECT new_id_user_text FROM users WHERE id_user = '{user}'", user)[
            'new_id_user_text']
        name_new_user = selone(f"SELECT name_new_user FROM users WHERE id_user = '{user}'", user)['name_new_user']
        create(f"REPLACE INTO users(id_user, name_user, company, notif) VALUES ('{new_id_user_text}', '{name_new_user}', '–§–§', 'client fbs fbo')",
               user)
        await callback.message.answer(text=f'ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: <b>{new_id_user_text}</b>\n'
                                           f'–§–∞–º–∏–ª–∏—è –∏ –ò–º—è: <b>{name_new_user}</b>\n'
                                           f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>–ú–µ–Ω–µ–¥–∂–µ—Ä</b>\n')
        await callback.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=markups.menu_ff)
        await callback.answer()
    elif callback.data == 'add_dr':
        new_id_user_text = selone(f"SELECT new_id_user_text FROM users WHERE id_user = '{user}'", user)[
            'new_id_user_text']
        name_new_user = selone(f"SELECT name_new_user FROM users WHERE id_user = '{user}'", user)['name_new_user']
        create(f"REPLACE INTO users(id_user, name_user, company, notif) VALUES ('{new_id_user_text}', '{name_new_user}', '–í–æ–¥–∏—Ç–µ–ª—å', 'log')",
               user)
        await callback.message.answer(text=f'ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: <b>{new_id_user_text}</b>\n'
                                           f'–§–∞–º–∏–ª–∏—è –∏ –ò–º—è: <b>{name_new_user}</b>\n'
                                           f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>–ú–µ–Ω–µ–¥–∂–µ—Ä</b>\n')
        await callback.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=markups.menu_ff)
        await callback.answer()
    elif callback.data == 'add_adm':
        new_id_user_text = selone(f"SELECT new_id_user_text FROM users WHERE id_user = '{user}'", user)[
            'new_id_user_text']
        name_new_user = selone(f"SELECT name_new_user FROM users WHERE id_user = '{user}'", user)['name_new_user']
        create(f"REPLACE INTO users(id_user, name_user, company, notif) VALUES ('{new_id_user_text}', '{name_new_user}', '–§–§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'client fbs fbo')",
               user)
        await callback.message.answer(text=f'ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: <b>{new_id_user_text}</b>\n'
                                           f'–§–∞–º–∏–ª–∏—è –∏ –ò–º—è: <b>{name_new_user}</b>\n'
                                           f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>–£–ø—Ä–∞–≤–ª—è—é—â–∏–π</b>\n')
        await callback.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=markups.menu_ff)
        await callback.answer()
    elif callback.data == 'add_count_mas':
        new_id_user_text = selone(f"SELECT new_id_user_text FROM users WHERE id_user = '{user}'", user)[
            'new_id_user_text']
        name_new_user = selone(f"SELECT name_new_user FROM users WHERE id_user = '{user}'", user)['name_new_user']

        if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
            create(f"REPLACE INTO users(id_user, count_retail, name_user, company, notif) VALUES ('{new_id_user_text}', 2, '{name_new_user}', '–ú–∞—Å—Ç–µ—Ä', 'skaz wood')", user)
        elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
            create(f"REPLACE INTO users(id_user, count_retail, name_user, company, notif) VALUES ('{new_id_user_text}', 1, '{name_new_user}', '–ú–∞—Å—Ç–µ—Ä', 'skaz wood')", user)

        await callback.message.answer(text=f'ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: <b>{new_id_user_text}</b>\n'
                                           f'–§–∞–º–∏–ª–∏—è –∏ –ò–º—è: <b>{name_new_user}</b>\n'
                                           f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>–ú–∞—Å—Ç–µ—Ä</b>\n')
        await callback.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=markups.menu_count)
        await callback.answer()
    elif callback.data == 'add_count_sbor':
        new_id_user_text = selone(f"SELECT new_id_user_text FROM users WHERE id_user = '{user}'", user)[
            'new_id_user_text']
        name_new_user = selone(f"SELECT name_new_user FROM users WHERE id_user = '{user}'", user)['name_new_user']

        if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
            create(
                f"REPLACE INTO users(id_user, count_retail, name_user, company) VALUES ('{new_id_user_text}', 2, '{name_new_user}', '–°–±–æ—Ä—â–∏–∫')",
                user)
        elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
            create(
                f"REPLACE INTO users(id_user, count_retail, name_user, company) VALUES ('{new_id_user_text}', 1, '{name_new_user}', '–°–±–æ—Ä—â–∏–∫')",
                user)

        await callback.message.answer(text=f'ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: <b>{new_id_user_text}</b>\n'
                                           f'–§–∞–º–∏–ª–∏—è –∏ –ò–º—è: <b>{name_new_user}</b>\n'
                                           f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: <b>–°–±–æ—Ä—â–∏–∫ –º–µ–±–µ–ª–∏</b>\n')
        await callback.message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–ø–∏—Å–∞–Ω!', reply_markup=markups.menu_count)
        await callback.answer()
    elif 'del_arch_' in callback.data:
        car_id = callback.data[9:]
        update(f"UPDATE cars SET flag_arch = 0 WHERE car_id = '{car_id}'", user)
        await callback.message.edit_text(text=f'–ú–∞—à–∏–Ω–∞ —Å ID {car_id} —É–±—Ä–∞–Ω–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞')
        await callback.answer()
    elif 'del_zakarch_' in callback.data:
        fbo_id = callback.data[12:]
        update(f"UPDATE fbo SET flag_arch = 0 WHERE fbo_id = '{fbo_id}'", user)
        await callback.message.edit_text(text=f'–ó–∞–∫–∞–∑ —Å ID {fbo_id} —É–±—Ä–∞–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞')
        await callback.answer()
    elif 'real_' in callback.data:
        list_ul = ul_l.show_list_ul_all(user)
        update(
            f"UPDATE users SET choose_ul = '{list_ul[int(callback.data[5:])]}' WHERE id_user = '{callback.message.chat.id}'",
            user)
        inline_wb = InlineKeyboardMarkup(row_width=1)
        inline_wb_b1 = InlineKeyboardButton(text='–î–∞', callback_data='realwb')
        inline_wb_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='norealwb')
        inline_wb.add(inline_wb_b1, inline_wb_b2)
        await callback.message.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{list_ul[int(callback.data[5:])]}</b>')
        await callback.message.answer(text='–ï—Å—Ç—å –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ WB?', reply_markup=inline_wb)
        await callback.answer()
    elif callback.data == 'realwb':
        update(f"UPDATE users SET plus_new_sell = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ WB –¥–æ 30—Å–º: ')
        await callback.answer()
    elif callback.data == 'norealwb':
        update(f"UPDATE users SET count_wb = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_wb_120 = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_wb_max = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_wb_60 = 0 WHERE id_user = '{user}'", user)
        inline_ozon = InlineKeyboardMarkup(row_width=1)
        inline_ozon_b1 = InlineKeyboardButton(text='–î–∞', callback_data='realozon')
        inline_ozon_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='norealozon')
        inline_ozon.add(inline_ozon_b1, inline_ozon_b2)
        await callback.message.answer(text='–ï—Å—Ç—å –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ OZON?', reply_markup=inline_ozon)
        await callback.answer()
    elif callback.data == 'realozon':
        update(f"UPDATE users SET plus_new_sell5 = 1 WHERE id_user = '{user}'", user)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ OZON –¥–æ 30—Å–º: ')
        await callback.answer()
    elif callback.data == 'norealozon':
        update(f"UPDATE users SET count_ozon = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_ozon_120 = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_ozon_max = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_ozon_60 = 0 WHERE id_user = '{user}'", user)
        inline_ya = InlineKeyboardMarkup(row_width=1)
        inline_ya_b1 = InlineKeyboardButton(text='–î–∞', callback_data='realya')
        inline_ya_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='norealya')
        inline_ya.add(inline_ya_b1, inline_ya_b2)
        await callback.message.answer(text='–ï—Å—Ç—å –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–ú?', reply_markup=inline_ya)
        await callback.answer()
    elif callback.data == 'realya':
        update(f"UPDATE users SET plus_new_sell8 = 101 WHERE id_user = '{user}'", user)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –Ø–ú –¥–æ 30—Å–º: ')
        await callback.answer()
    elif callback.data == 'norealya':
        update(f"UPDATE users SET count_ya = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_ya_120 = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_ya_max = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_ya_60 = 0 WHERE id_user = '{user}'", user)
        inline_cdek = InlineKeyboardMarkup(row_width=1)
        inline_cdek_b1 = InlineKeyboardButton(text='–î–∞', callback_data='realcdek')
        inline_cdek_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='norealcdek')
        inline_cdek.add(inline_cdek_b1, inline_cdek_b2)
        await callback.message.answer(text='–ï—Å—Ç—å –æ—Ç–≥—Ä—É–∑–∫–∏ –Ω–∞ CDEK?', reply_markup=inline_cdek)
        await callback.answer()
    elif callback.data == 'realcdek':
        update(f"UPDATE users SET plus_new_sell8 = 105 WHERE id_user = '{user}'", user)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ CDEK –¥–æ 30—Å–º: ')
        await callback.answer()
    elif callback.data == 'norealcdek':
        update(f"UPDATE users SET count_cdek = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_cdek_120 = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_cdek_max = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET count_cdek_60 = 0 WHERE id_user = '{user}'", user)
        update(f"UPDATE users SET plus_new_sell8 = 2 WHERE id_user = '{user}'", user)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞ —É–ø–∞–∫–æ–≤–∫—É: ')
        await callback.answer()
    elif 'calc_' in callback.data:
        list_ul = ul_l.show_list_ul_all(user)
        update(f"UPDATE users SET choose_ul = '{list_ul[int(callback.data[5:])]}' WHERE id_user = '{callback.message.chat.id}'", user)
        choose_ul = selone(f"SELECT choose_ul FROM users WHERE id_user = '{callback.message.chat.id}'", user)['choose_ul']
        await callback.message.answer(text=calc.calc_sell(choose_ul, user))
        keyboard2 = types.InlineKeyboardMarkup()
        keyboard2.row_width = 5
        keyboard2.add(types.InlineKeyboardButton(text='–û–±–Ω—É–ª–∏—Ç—å', callback_data='nu'))
        await callback.message.answer(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ.\n"
                                           "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ä–∞—Å—á–∏—Ç–∞–ª—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–û–±–Ω—É–ª–∏—Ç—å'", reply_markup=keyboard2)
        await callback.answer()
    elif callback.data == 'nu':
        choose_ul = selone(f"SELECT choose_ul FROM users WHERE id_user = '{callback.message.chat.id}'", user)['choose_ul']
        calc.null_sell(choose_ul, user)
        await callback.message.edit_text(f'–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {choose_ul} –æ–±–Ω—É–ª–µ–Ω—ã!')
        await callback.message.answer(text=f'FBS', reply_markup=markups.menu_fbs)
        await callback.answer()
    elif 'unu_' in callback.data:
        choose_ul = callback.data[4:]
        calc.null_sell(choose_ul, user)
        await callback.message.edit_text(f'–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ {choose_ul} –æ–±–Ω—É–ª–µ–Ω—ã!')
        await callback.message.answer(text=f'FBS', reply_markup=markups.menu_fbs)
        await callback.answer()

    # –†–∞—Å—Ö–æ–¥ –ú–µ–±–µ–ª—å
    elif callback.data == 'donepay_yes':
        update(f"UPDATE users SET word_8 = '–û–ø–ª–∞—á–µ–Ω–æ' WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markups.inline_cat)
        await callback.answer()
    elif callback.data == 'donepay_no':
        update(f"UPDATE users SET word_8 = '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ' WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=markups.inline_cat)
        await callback.answer()
    elif callback.data == 'cat_arenda':
        update(f"UPDATE users SET word_1 = '–ê—Ä–µ–Ω–¥–∞' WHERE id_user = '{callback.message.chat.id}'", user)
        values_list = selist(f"SELECT arenda FROM ras WHERE type_col = 'pred'", user)[0]['arenda'].split('&')

        inline_cat = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_cat_b = InlineKeyboardButton(text=values_list[value], callback_data=f'pred_arenda_{value}')
            inline_cat.add(inline_cat_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=inline_cat)
        await callback.answer()
    elif callback.data == 'cat_fot':
        update(f"UPDATE users SET word_1 = '–§–û–¢' WHERE id_user = '{callback.message.chat.id}'", user)
        values_list = selist(f"SELECT fot FROM ras WHERE type_col = 'pred'", user)[0]['fot'].split('&')
        inline_cat = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_cat_b = InlineKeyboardButton(text=values_list[value], callback_data=f'pred_fot_{value}')
            inline_cat.add(inline_cat_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=inline_cat)
        await callback.answer()
    elif callback.data == 'cat_rash':
        update(f"UPDATE users SET word_1 = '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏' WHERE id_user = '{callback.message.chat.id}'", user)
        values_list = selist(f"SELECT rashod FROM ras WHERE type_col = 'pred'", user)[0]['rashod'].split('&')
        inline_cat = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_cat_b = InlineKeyboardButton(text=values_list[value], callback_data=f'pred_rash_{value}')
            inline_cat.add(inline_cat_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫:', reply_markup=inline_cat)
        await callback.answer()
    elif callback.data == 'cat_logist':
        update(f"UPDATE users SET word_1 = '–õ–æ–≥–∏—Å—Ç–∏–∫–∞' WHERE id_user = '{callback.message.chat.id}'", user)
        values_list = selist(f"SELECT log FROM ras WHERE type_col = 'pred'", user)[0]['log'].split('&')
        inline_cat = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_cat_b = InlineKeyboardButton(text=values_list[value], callback_data=f'pred_logist_{value}')
            inline_cat.add(inline_cat_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=inline_cat)
        await callback.answer()
    elif callback.data == 'cat_outs':
        update(f"UPDATE users SET word_1 = '–ê—É—Ç—Å–æ—Ä—Å' WHERE id_user = '{callback.message.chat.id}'", user)
        values_list = selist(f"SELECT auts FROM ras WHERE type_col = 'pred'", user)[0]['auts'].split('&')
        inline_cat = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_cat_b = InlineKeyboardButton(text=values_list[value], callback_data=f'pred_outs_{value}')
            inline_cat.add(inline_cat_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=inline_cat)
        await callback.answer()
    elif callback.data == 'cat_instr':
        update(f"UPDATE users SET word_1 = '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' WHERE id_user = '{callback.message.chat.id}'", user)
        values_list = selist(f"SELECT instr FROM ras WHERE type_col = 'pred'", user)[0]['instr'].split('&')
        inline_cat = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_cat_b = InlineKeyboardButton(text=values_list[value], callback_data=f'pred_instr_{value}')
            inline_cat.add(inline_cat_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=inline_cat)
        await callback.answer()
    elif callback.data == 'cat_other':
        update(f"UPDATE users SET word_1 = '–ü—Ä–æ—á–µ–µ' WHERE id_user = '{callback.message.chat.id}'", user)
        values_list = selist(f"SELECT proch FROM ras WHERE type_col = 'pred'", user)[0]['proch'].split('&')
        inline_cat = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_cat_b = InlineKeyboardButton(text=values_list[value], callback_data=f'pred_other_{value}')
            inline_cat.add(inline_cat_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:', reply_markup=inline_cat)
        await callback.answer()
    elif 'pred_arenda_' in callback.data:
        id_pred = int(callback.data.split('_')[2])
        pred_list = selist(f"SELECT arenda FROM ras WHERE type_col = 'pred'", user)[0]['arenda'].split('&')
        pred = pred_list[id_pred]

        values_list = selist(f"SELECT arenda FROM ras WHERE type_col = 'kontr'", user)[0]['arenda'].split('&')
        update(f"UPDATE users SET word_2 = '{pred}' WHERE id_user = '{callback.message.chat.id}'", user)

        inline_contr = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_contr_b = InlineKeyboardButton(text=values_list[value], callback_data=f'kontr_arenda_{value}')
            inline_contr.add(inline_contr_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', reply_markup=inline_contr)
        await callback.answer()
    elif 'pred_fot_' in callback.data:
        id_pred = int(callback.data.split('_')[2])
        pred_list = selist(f"SELECT fot FROM ras WHERE type_col = 'pred'", user)[0]['fot'].split('&')
        pred = pred_list[id_pred]

        values_list = selist(f"SELECT fot FROM ras WHERE type_col = 'kontr'", user)[0]['fot'].split('&')
        update(f"UPDATE users SET word_2 = '{pred}' WHERE id_user = '{callback.message.chat.id}'", user)

        inline_contr = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_contr_b = InlineKeyboardButton(text=values_list[value], callback_data=f'kontr_fot_{value}')
            inline_contr.add(inline_contr_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', reply_markup=inline_contr)
        await callback.answer()
    elif 'pred_rash_' in callback.data:
        id_pred = int(callback.data.split('_')[2])
        pred_list = selist(f"SELECT rashod FROM ras WHERE type_col = 'pred'", user)[0]['rashod'].split('&')
        pred = pred_list[id_pred]

        values_list = selist(f"SELECT rashod FROM ras WHERE type_col = 'kontr'", user)[0]['rashod'].split('&')
        update(f"UPDATE users SET word_2 = '{pred}' WHERE id_user = '{callback.message.chat.id}'", user)

        inline_contr = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_contr_b = InlineKeyboardButton(text=values_list[value], callback_data=f'kontr_rash_{value}')
            inline_contr.add(inline_contr_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', reply_markup=inline_contr)
        await callback.answer()
    elif 'pred_logist_' in callback.data:
        id_pred = int(callback.data.split('_')[2])
        pred_list = selist(f"SELECT log FROM ras WHERE type_col = 'pred'", user)[0]['log'].split('&')
        pred = pred_list[id_pred]

        values_list = selist(f"SELECT log FROM ras WHERE type_col = 'kontr'", user)[0]['log'].split('&')
        update(f"UPDATE users SET word_2 = '{pred}' WHERE id_user = '{callback.message.chat.id}'", user)

        inline_contr = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_contr_b = InlineKeyboardButton(text=values_list[value], callback_data=f'kontr_logist_{value}')
            inline_contr.add(inline_contr_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', reply_markup=inline_contr)
        await callback.answer()
    elif 'pred_outs_' in callback.data:
        id_pred = int(callback.data.split('_')[2])
        pred_list = selist(f"SELECT auts FROM ras WHERE type_col = 'pred'", user)[0]['auts'].split('&')
        pred = pred_list[id_pred]

        values_list = selist(f"SELECT auts FROM ras WHERE type_col = 'kontr'", user)[0]['auts'].split('&')
        update(f"UPDATE users SET word_2 = '{pred}' WHERE id_user = '{callback.message.chat.id}'", user)

        inline_contr = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_contr_b = InlineKeyboardButton(text=values_list[value], callback_data=f'kontr_outs_{value}')
            inline_contr.add(inline_contr_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', reply_markup=inline_contr)
        await callback.answer()
    elif 'pred_instr_' in callback.data:
        id_pred = int(callback.data.split('_')[2])
        pred_list = selist(f"SELECT instr FROM ras WHERE type_col = 'pred'", user)[0]['instr'].split('&')
        pred = pred_list[id_pred]

        values_list = selist(f"SELECT instr FROM ras WHERE type_col = 'kontr'", user)[0]['instr'].split('&')
        update(f"UPDATE users SET word_2 = '{pred}' WHERE id_user = '{callback.message.chat.id}'", user)

        inline_contr = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_contr_b = InlineKeyboardButton(text=values_list[value], callback_data=f'kontr_instr_{value}')
            inline_contr.add(inline_contr_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', reply_markup=inline_contr)
        await callback.answer()
    elif 'pred_other_' in callback.data:
        id_pred = int(callback.data.split('_')[2])
        pred_list = selist(f"SELECT proch FROM ras WHERE type_col = 'pred'", user)[0]['proch'].split('&')
        pred = pred_list[id_pred]

        values_list = selist(f"SELECT proch FROM ras WHERE type_col = 'kontr'", user)[0]['proch'].split('&')
        update(f"UPDATE users SET word_2 = '{pred}' WHERE id_user = '{callback.message.chat.id}'", user)

        inline_contr = InlineKeyboardMarkup(row_width=1)
        for value in range(len(values_list)):
            inline_contr_b = InlineKeyboardButton(text=values_list[value], callback_data=f'kontr_other_{value}')
            inline_contr.add(inline_contr_b)
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:', reply_markup=inline_contr)
        await callback.answer()
    elif 'kontr_arenda_' in callback.data:
        id_kontr = int(callback.data.split('_')[2])
        values_list = selist(f"SELECT arenda FROM ras WHERE type_col = 'kontr'", user)[0]['arenda'].split('&')
        kontr = values_list[int(id_kontr)]
        update(f"UPDATE users SET word_3 = '{kontr}' WHERE id_user = '{callback.message.chat.id}'", user)
        update(f"UPDATE users SET act_retail = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        await callback.answer()
    elif 'kontr_fot_' in callback.data:
        id_kontr = int(callback.data.split('_')[2])
        values_list = selist(f"SELECT fot FROM ras WHERE type_col = 'kontr'", user)[0]['fot'].split('&')
        kontr = values_list[int(id_kontr)]
        update(f"UPDATE users SET word_3 = '{kontr}' WHERE id_user = '{callback.message.chat.id}'", user)
        update(f"UPDATE users SET act_retail = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        await callback.answer()
    elif 'kontr_rash_' in callback.data:
        id_kontr = int(callback.data.split('_')[2])
        values_list = selist(f"SELECT rashod FROM ras WHERE type_col = 'kontr'", user)[0]['rashod'].split('&')
        kontr = values_list[int(id_kontr)]
        update(f"UPDATE users SET word_3 = '{kontr}' WHERE id_user = '{callback.message.chat.id}'", user)
        update(f"UPDATE users SET act_retail = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        await callback.answer()
    elif 'kontr_logist_' in callback.data:
        id_kontr = int(callback.data.split('_')[2])
        values_list = selist(f"SELECT log FROM ras WHERE type_col = 'kontr'", user)[0]['log'].split('&')
        kontr = values_list[int(id_kontr)]
        update(f"UPDATE users SET word_3 = '{kontr}' WHERE id_user = '{callback.message.chat.id}'", user)
        update(f"UPDATE users SET act_retail = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        await callback.answer()
    elif 'kontr_outs_' in callback.data:
        id_kontr = int(callback.data.split('_')[2])
        values_list = selist(f"SELECT auts FROM ras WHERE type_col = 'kontr'", user)[0]['auts'].split('&')
        kontr = values_list[int(id_kontr)]
        update(f"UPDATE users SET word_3 = '{kontr}' WHERE id_user = '{callback.message.chat.id}'", user)
        update(f"UPDATE users SET act_retail = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        await callback.answer()
    elif 'kontr_instr_' in callback.data:
        id_kontr = int(callback.data.split('_')[2])
        values_list = selist(f"SELECT instr FROM ras WHERE type_col = 'kontr'", user)[0]['instr'].split('&')
        kontr = values_list[int(id_kontr)]
        update(f"UPDATE users SET word_3 = '{kontr}' WHERE id_user = '{callback.message.chat.id}'", user)
        update(f"UPDATE users SET act_retail = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        await callback.answer()
    elif 'kontr_other_' in callback.data:
        id_kontr = int(callback.data.split('_')[2])
        values_list = selist(f"SELECT proch FROM ras WHERE type_col = 'kontr'", user)[0]['proch'].split('&')
        kontr = values_list[int(id_kontr)]
        update(f"UPDATE users SET word_3 = '{kontr}' WHERE id_user = '{callback.message.chat.id}'", user)
        update(f"UPDATE users SET act_retail = 1 WHERE id_user = '{callback.message.chat.id}'", user)
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        await callback.answer()
    elif 'pay_fara' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '–ö–∞—Ä—Ç–∞ –§–∞—Ä—Ö–∞—Ç',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_kay' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     'p/c –û–û–û (–ê–ª—å—Ñ–∞ –±–∞–Ω–∫)',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_ooo' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     'p/c –û–û–û (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_ozooo' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '—Ä/—Å –û–û–û (Ozon)',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_ozok' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '—Ä/—Å –ò–ü –ö–∞–ª–∏–º—É–ª–ª–∏–Ω (Ozon)',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_ipfara' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '—Ä/—Å –ò–ü –ò—Å—Ç—è–∫–æ–≤ (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_ipkay' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '—Ä/—Å –ò–ü –ö–∞–ª–∏–º—É–ª–ª–∏–Ω (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_rn' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '–†–ù-–ö–∞—Ä—Ç',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_avito' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '–ê–≤–∏—Ç–æ',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_modbank' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:J{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4'],
                                                     '–ú–æ–¥—É–ª—å –ë–∞–Ω–∫',
                                                     selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')

        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)
    elif 'pay_nonepay' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã`', parse_mode='Markdown')
        delta_1 = datetime.timedelta(hours=5)
        now = datetime.datetime.now() + delta_1
        if int(now.day) < 10:
            day_edit = '0' + str(now.day)
        else:
            day_edit = now.day

        if int(now.month) < 10:
            month_edit = '0' + str(now.month)
        else:
            month_edit = now.month
        date_create = f'{day_edit}.{month_edit}.{now.year}'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üüßüü®üü©üü©üü©\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {now.year}"

        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üü•üü•üüßüü®üü©üü©üü©üü©üü©\n`–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏`', parse_mode='Markdown')
        values_list = worksheet.col_values(1)
        num_row = len(values_list) + 1
        await callback.message.edit_text('üü•üüßüü®üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'A{num_row}:D{num_row}', [[selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'],
                                                     date_create,
                                                     selone(f"SELECT word_2 FROM users WHERE id_user = '{user}'", user)['word_2'],
                                                     selone(f"SELECT word_3 FROM users WHERE id_user = '{user}'", user)['word_3']]])

        await callback.message.edit_text('üüßüü®üü©üü©üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        worksheet.update(f'F{num_row}:H{num_row}', [[selone(f"SELECT word_6 FROM users WHERE id_user = '{user}'", user)['word_6'],
                                                     selone(f"SELECT word_5 FROM users WHERE id_user = '{user}'", user)['word_5'],
                                                     selone(f"SELECT word_4 FROM users WHERE id_user = '{user}'", user)['word_4']]])

        worksheet.update(f'J{num_row}', [[selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8']]])

        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! ‚úÖ', parse_mode='Markdown')
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)

    # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
    elif 'rshod_' in callback.data:
        await callback.answer()
        num_row = callback.data.split('_')[1]
        year = callback.data.split('_')[2]

        inline_pay_2 = InlineKeyboardMarkup(row_width=1)
        inline_pay_2_b1 = InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞ –§–∞—Ä—Ö–∞—Ç', callback_data=f'pay2_fara_{num_row}_{year}')
        inline_pay_2_b2 = InlineKeyboardButton(text='p/c –û–û–û (–ê–ª—å—Ñ–∞ –±–∞–Ω–∫)', callback_data=f'pay2_kay_{num_row}_{year}')
        inline_pay_2_b3 = InlineKeyboardButton(text='p/c –û–û–û (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)', callback_data=f'pay2_ooo_{num_row}_{year}')
        inline_pay_2_b4 = InlineKeyboardButton(text='—Ä/—Å –ò–ü –ò—Å—Ç—è–∫–æ–≤ (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)', callback_data=f'pay2_ipfara_{num_row}_{year}')
        inline_pay_2_b5 = InlineKeyboardButton(text='—Ä/—Å –ò–ü –ö–∞–ª–∏–º—É–ª–ª–∏–Ω (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)', callback_data=f'pay2_ipkay_{num_row}_{year}')
        inline_pay_2_b6 = InlineKeyboardButton(text='—Ä/—Å –ò–ü –ö–∞–ª–∏–º—É–ª–ª–∏–Ω (Ozon)', callback_data=f'pay2_ozok_{num_row}_{year}')
        inline_pay_2_b7 = InlineKeyboardButton(text='—Ä/—Å –û–û–û (Ozon)', callback_data=f'pay2_ozooo_{num_row}_{year}')
        inline_pay_2_b8 = InlineKeyboardButton(text='–†–ù-–ö–∞—Ä—Ç', callback_data=f'pay2_rn_{num_row}_{year}')
        inline_pay_2_b9 = InlineKeyboardButton(text='–ê–≤–∏—Ç–æ', callback_data=f'pay2_avito_{num_row}_{year}')
        inline_pay_2_b10 = InlineKeyboardButton(text='–ú–æ–¥—É–ª—å –ë–∞–Ω–∫', callback_data=f'pay2_modbank_{num_row}_{year}')
        inline_pay_2.add(inline_pay_2_b1).add(inline_pay_2_b2).add(inline_pay_2_b3).add(inline_pay_2_b4).add(inline_pay_2_b5).add(inline_pay_2_b6).add(inline_pay_2_b7).add(inline_pay_2_b8).add(inline_pay_2_b9).add(inline_pay_2_b10)

        await callback.message.edit_text(text=f'C –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞?', reply_markup=inline_pay_2)
    elif 'pay2_' in callback.data:
        await callback.answer()
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üü•üü•üü•\n`–≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`', parse_mode='Markdown')
        type_pay = callback.data.split('_')[1]
        num_row = callback.data.split('_')[2]
        year = callback.data.split('_')[3]

        if type_pay == 'fara':
            name_pay = '–ö–∞—Ä—Ç–∞ –§–∞—Ä—Ö–∞—Ç'
        elif type_pay == 'kay':
            name_pay = 'p/c –û–û–û (–ê–ª—å—Ñ–∞ –±–∞–Ω–∫)'
        elif type_pay == 'ooo':
            name_pay = 'p/c –û–û–û (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)'
        elif type_pay == 'ipfara':
            name_pay = '—Ä/—Å –ò–ü –ò—Å—Ç—è–∫–æ–≤ (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)'
        elif type_pay == 'ozok':
            name_pay = '—Ä/—Å –ò–ü –ö–∞–ª–∏–º—É–ª–ª–∏–Ω (Ozon)'
        elif type_pay == 'ozooo':
            name_pay = '—Ä/—Å –û–û–û (Ozon)'
        elif type_pay == 'rn':
            name_pay = '–†–ù-–ö–∞—Ä—Ç'
        elif type_pay == 'avito':
            name_pay = '–ê–≤–∏—Ç–æ'
        elif type_pay == 'modbank':
            name_pay = '–ú–æ–¥—É–ª—å –ë–∞–Ω–∫'
        elif type_pay == 'ipkay':
            name_pay = '—Ä/—Å –ò–ü –ö–∞–ª–∏–º—É–ª–ª–∏–Ω (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)'
        await callback.message.edit_text('üü•üü•üü•üü•üü•üü•üüßüüßüü®\n`–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ`', parse_mode='Markdown')
        name_list = f"–†–∞—Å—Ö–æ–¥ {year}"
        worksheet = sh.worksheet(name_list)
        await callback.message.edit_text('üü•üüßüüßüüßüü®üü®üü®üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –æ–ø–ª–∞—Ç—ã`', parse_mode='Markdown')
        worksheet.update_cell(num_row, 9, name_pay)
        await callback.message.edit_text('üüßüü®üü®üü©üü©üü©üü©üü©üü©\n`–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞ –æ–ø–ª–∞—Ç—ã`', parse_mode='Markdown')
        worksheet.update_cell(num_row, 10, '–û–ø–ª–∞—á–µ–Ω–æ')

        await callback.message.edit_text(text=f'‚úÖ –°—á–µ—Ç –Ω–∞ —Å—É–º–º—É <b>{worksheet.cell(num_row, 8).value}</b> –æ–ø–ª–∞—á–µ–Ω ‚úÖ')
        await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markups.menu_retail)

    # –ü—Ä–∏–±—ã–ª–æ –°–∫–ª–∞–¥ –ú–µ–±–µ–ª—å
    elif 'pribmeb_' in callback.data:
        object_name = callback.data.split('_')[1]
        ed = selone(f"SELECT ed_2 FROM warehouse_c WHERE name_item = '{object_name}'", user)['ed_2']

        update(f"UPDATE users SET act_sk = '{callback.data}_no' WHERE id_user = '{user}'", user)
        await callback.message.edit_text(text=f'–°–∫–æ–ª—å–∫–æ <b>{ed}</b> –ø—Ä–∏–±—ã–ª–æ –ø–æ–∑–∏—Ü–∏–∏ <b>¬´{object_name}¬ª</b>?')

        await callback.answer()

    # –£–µ—Ö–∞–ª–æ –ú–µ–±–µ–ª—å
    elif 'uemeb_' in callback.data:
        object_name = callback.data.split('_')[1]
        ed = selone(f"SELECT ed_2 FROM warehouse_c WHERE name_item = '{object_name}'", user)['ed_2']
        update(f"UPDATE users SET act_sk = '{callback.data}' WHERE id_user = '{user}'", user)
        await callback.message.edit_text(text=f'–°–∫–æ–ª—å–∫–æ <b>{ed}</b> —É–µ—Ö–∞–ª–æ –ø–æ–∑–∏—Ü–∏–∏ <b>¬´{object_name}¬ª</b>?')
        await callback.answer()

    # –ë—Ä–∞–∫
    elif 'brk_' in callback.data:
        await callback.message.delete()

        update(f"UPDATE users SET act_sk = '{callback.data}' WHERE id_user = '{user}'", user)
        await callback.message.answer(text=f'–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –±—Ä–∞–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ <b>¬´{callback.data[4:]}¬ª</b>?', reply_markup=markups.back_count_retail, parse_mode='HTML')
        await callback.answer()

    # –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
    elif 'work_' in callback.data:
        name_worker = callback.data.split('_')[1]

        count_workers = int(selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1]) - 1

        res = f'count_{count_workers}'
        update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)

        with open('user', 'r', encoding='utf-8') as outfile:
            name_objects = json.load(outfile)

        for i in range(len(name_objects[0])):
            if name_objects[0][i] == name_worker:
                del name_objects[0][i]
                break

        name_objects[1][name_worker] = []

        with open('user', 'w', encoding='utf-8') as outfile:
            json.dump(name_objects, outfile, ensure_ascii=False)

        inline_time = InlineKeyboardMarkup(row_width=3)
        inline_time_b1 = InlineKeyboardButton(text='9:00', callback_data=f'timebegin_9:00_{name_worker}')
        inline_time_b2 = InlineKeyboardButton(text='9:20', callback_data=f'timebegin_9:20_{name_worker}')
        inline_time_b3 = InlineKeyboardButton(text='9:40', callback_data=f'timebegin_9:40_{name_worker}')
        inline_time_b4 = InlineKeyboardButton(text='10:00', callback_data=f'timebegin_10:00_{name_worker}')
        inline_time_b5 = InlineKeyboardButton(text='10:20', callback_data=f'timebegin_10:20_{name_worker}')
        inline_time_b6 = InlineKeyboardButton(text='10:40', callback_data=f'timebegin_10:40_{name_worker}')
        inline_time_b7 = InlineKeyboardButton(text='11:00', callback_data=f'timebegin_11:00_{name_worker}')
        inline_time_b8 = InlineKeyboardButton(text='11:20', callback_data=f'timebegin_11:20_{name_worker}')
        inline_time_b9 = InlineKeyboardButton(text='11:40', callback_data=f'timebegin_11:40_{name_worker}')
        inline_time_b10 = InlineKeyboardButton(text='12:00', callback_data=f'timebegin_12:00_{name_worker}')
        inline_time_b11 = InlineKeyboardButton(text='12:20', callback_data=f'timebegin_12:20_{name_worker}')
        inline_time_b12 = InlineKeyboardButton(text='12:40', callback_data=f'timebegin_12:40_{name_worker}')
        inline_time_b13 = InlineKeyboardButton(text='13:00', callback_data=f'timebegin_13:00_{name_worker}')
        inline_time_b14 = InlineKeyboardButton(text='13:20', callback_data=f'timebegin_13:20_{name_worker}')
        inline_time_b15 = InlineKeyboardButton(text='13:40', callback_data=f'timebegin_13:40_{name_worker}')
        inline_time_b16 = InlineKeyboardButton(text='14:00', callback_data=f'timebegin_14:00_{name_worker}')
        inline_time_b17 = InlineKeyboardButton(text='14:20', callback_data=f'timebegin_14:20_{name_worker}')
        inline_time_b18 = InlineKeyboardButton(text='14:40', callback_data=f'timebegin_14:40_{name_worker}')
        inline_time_b19 = InlineKeyboardButton(text='15:00', callback_data=f'timebegin_15:00_{name_worker}')
        inline_time_b20 = InlineKeyboardButton(text='15:20', callback_data=f'timebegin_15:20_{name_worker}')
        inline_time_b21 = InlineKeyboardButton(text='15:40', callback_data=f'timebegin_15:40_{name_worker}')
        inline_time_b22 = InlineKeyboardButton(text='16:00', callback_data=f'timebegin_16:00_{name_worker}')
        inline_time_b23 = InlineKeyboardButton(text='16:20', callback_data=f'timebegin_16:20_{name_worker}')
        inline_time_b24 = InlineKeyboardButton(text='16:40', callback_data=f'timebegin_16:40_{name_worker}')
        inline_time.add(inline_time_b1, inline_time_b2, inline_time_b3).add(inline_time_b4, inline_time_b5, inline_time_b6)\
            .add(inline_time_b7, inline_time_b8, inline_time_b9).add(inline_time_b10, inline_time_b11, inline_time_b12)\
            .add(inline_time_b13, inline_time_b14, inline_time_b15).add(inline_time_b16, inline_time_b17, inline_time_b18)\
            .add(inline_time_b19, inline_time_b20, inline_time_b21).add(inline_time_b22, inline_time_b23, inline_time_b24)

        await callback.message.edit_text(text=f'–í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É {name_worker}:', reply_markup=inline_time)
        await callback.answer()
    elif 'timebegin_' in callback.data:

        name_worker = callback.data.split('_')[2]
        time_begin = callback.data.split('_')[1]
        inline_time = InlineKeyboardMarkup(row_width=3)
        inline_time_b1 = InlineKeyboardButton(text='14:00', callback_data=f'timeend_{time_begin}_14:00_{name_worker}')
        inline_time_b2 = InlineKeyboardButton(text='14:20', callback_data=f'timeend_{time_begin}_14:20_{name_worker}')
        inline_time_b3 = InlineKeyboardButton(text='14:40', callback_data=f'timeend_{time_begin}_14:40_{name_worker}')
        inline_time_b4 = InlineKeyboardButton(text='15:00', callback_data=f'timeend_{time_begin}_15:00_{name_worker}')
        inline_time_b5 = InlineKeyboardButton(text='15:20', callback_data=f'timeend_{time_begin}_15:20_{name_worker}')
        inline_time_b6 = InlineKeyboardButton(text='15:40', callback_data=f'timeend_{time_begin}_15:40_{name_worker}')
        inline_time_b7 = InlineKeyboardButton(text='16:00', callback_data=f'timeend_{time_begin}_16:00_{name_worker}')
        inline_time_b8 = InlineKeyboardButton(text='16:20', callback_data=f'timeend_{time_begin}_16:20_{name_worker}')
        inline_time_b9 = InlineKeyboardButton(text='16:40', callback_data=f'timeend_{time_begin}_16:40_{name_worker}')
        inline_time_b10 = InlineKeyboardButton(text='17:00', callback_data=f'timeend_{time_begin}_17:00_{name_worker}')
        inline_time_b11 = InlineKeyboardButton(text='17:20', callback_data=f'timeend_{time_begin}_17:20_{name_worker}')
        inline_time_b12 = InlineKeyboardButton(text='17:40', callback_data=f'timeend_{time_begin}_17:40_{name_worker}')
        inline_time_b13 = InlineKeyboardButton(text='18:00', callback_data=f'timeend_{time_begin}_18:00_{name_worker}')
        inline_time_b14 = InlineKeyboardButton(text='18:20', callback_data=f'timeend_{time_begin}_18:20_{name_worker}')
        inline_time_b15 = InlineKeyboardButton(text='18:40', callback_data=f'timeend_{time_begin}_18:40_{name_worker}')
        inline_time_b16 = InlineKeyboardButton(text='19:00', callback_data=f'timeend_{time_begin}_19:00_{name_worker}')
        inline_time_b17 = InlineKeyboardButton(text='19:20', callback_data=f'timeend_{time_begin}_19:20_{name_worker}')
        inline_time_b18 = InlineKeyboardButton(text='19:40', callback_data=f'timeend_{time_begin}_19:40_{name_worker}')
        inline_time_b19 = InlineKeyboardButton(text='20:00', callback_data=f'timeend_{time_begin}_20:00_{name_worker}')
        inline_time_b20 = InlineKeyboardButton(text='20:20', callback_data=f'timeend_{time_begin}_20:20_{name_worker}')
        inline_time_b21 = InlineKeyboardButton(text='20:40', callback_data=f'timeend_{time_begin}_20:40_{name_worker}')
        inline_time_b22 = InlineKeyboardButton(text='21:00', callback_data=f'timeend_{time_begin}_21:00_{name_worker}')
        inline_time_b23 = InlineKeyboardButton(text='21:20', callback_data=f'timeend_{time_begin}_21:20_{name_worker}')
        inline_time_b24 = InlineKeyboardButton(text='21:40', callback_data=f'timeend_{time_begin}_21:40_{name_worker}')
        inline_time.add(inline_time_b1, inline_time_b2, inline_time_b3).add(inline_time_b4, inline_time_b5, inline_time_b6)\
            .add(inline_time_b7, inline_time_b8, inline_time_b9).add(inline_time_b10, inline_time_b11, inline_time_b12)\
            .add(inline_time_b13, inline_time_b14, inline_time_b15).add(inline_time_b16, inline_time_b17, inline_time_b18)\
            .add(inline_time_b19, inline_time_b20, inline_time_b21).add(inline_time_b22, inline_time_b23, inline_time_b24)

        await callback.message.edit_text(text=f'–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É {name_worker}:', reply_markup=inline_time)
        await callback.answer()
    elif 'timeend_' in callback.data:

        name_worker = callback.data.split('_')[3]
        time_begin = callback.data.split('_')[1]
        time_end = callback.data.split('_')[2]

        count_workers = int(selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1])

        with open('user', 'r', encoding='utf-8') as outfile:
            name_objects = json.load(outfile)

        name_objects[1][name_worker] = [time_begin, time_end]

        with open('user', 'w', encoding='utf-8') as outfile:
            json.dump(name_objects, outfile, ensure_ascii=False)

        if count_workers > 0:
            inline_workers = InlineKeyboardMarkup(row_width=1)
            for w in name_objects[0]:
                inline_workers_b = InlineKeyboardButton(text=w, callback_data=f'work_{w}')
                inline_workers.add(inline_workers_b)

            await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=inline_workers)
        else:
            res = 'rastysh1_'
            update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
            await callback.message.edit_text('–°–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –†–∞—Å—Ç—É—â–∏—Ö 1?')
        await callback.answer()

    # –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞
    elif 'works_' in callback.data:
        name_worker = callback.data.split('_')[1]

        count_workers = int(selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1]) - 1

        res = f'counts_{count_workers}'
        update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)

        with open('user', 'r', encoding='utf-8') as outfile:
            name_objects = json.load(outfile)

        for i in range(len(name_objects[0])):
            if name_objects[0][i] == name_worker:
                del name_objects[0][i]
                break

        name_objects[1][name_worker] = []

        with open('user', 'w', encoding='utf-8') as outfile:
            json.dump(name_objects, outfile, ensure_ascii=False)

        name_worker = callback.data.split('_')[1]
        time_begin = 0
        time_end = 0

        count_workers = int(selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1])

        with open('user', 'r', encoding='utf-8') as outfile:
            name_objects = json.load(outfile)

        name_objects[1][name_worker] = [time_begin, time_end]

        with open('user', 'w', encoding='utf-8') as outfile:
            json.dump(name_objects, outfile, ensure_ascii=False)

        if count_workers > 0:
            inline_workers = InlineKeyboardMarkup(row_width=1)
            for w in name_objects[0]:
                inline_workers_b = InlineKeyboardButton(text=w, callback_data=f'works_{w}')
                inline_workers.add(inline_workers_b)

            await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=inline_workers)
        else:
            res = 'rastyshs1_'
            update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
            await callback.message.edit_text('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –†–∞—Å—Ç—É—â–∏—Ö 1?')
        await callback.answer()

    # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
    elif 'logis_' in callback.data:
        await callback.message.delete()
        list_call = callback.data.split('_')
        date_ship = list_call[1]
        id_ship = list_call[2]
        num_ship = int(selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'])
        count_logis = int(selone(f"SELECT count_logis FROM users WHERE id_user = '{user}'", user)['count_logis']) + 1
        new_num = num_ship + 100
        update(f"UPDATE shipping SET num_ship = '{num_ship}' WHERE id_ship = '{id_ship}'", user)
        if count_logis != len(selist(f"SELECT * FROM shipping WHERE date_ship = '{date_ship}' AND status_ship = '–í –æ—á–µ—Ä–µ–¥–∏'", user)):
            update(f"UPDATE users SET act_log = '{new_num}' WHERE id_user = '{user}'", user)
            update(f"UPDATE users SET count_logis = '{count_logis}' WHERE id_user = '{user}'", user)
        else:
            update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
            update(f"UPDATE users SET count_logis = 0 WHERE id_user = '{user}'", user)
            create(f"REPLACE INTO work_ship(date_work) VALUES ('{date_ship}')", user)
            await callback.message.answer('–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!')
            await callback.message.answer(text=f'–ú–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∏–∫–∏', reply_markup=markups.menu_logistic)
        await callback.answer()
    elif 'logisno_' in callback.data:
        list_call = callback.data.split('_')
        id_ship = list_call[1]

        inline_m = InlineKeyboardMarkup(row_width=2)
        inline_m_b1 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'logisnoyes_{id_ship}')
        inline_m_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'logisnono_{id_ship}')
        inline_m.add(inline_m_b1, inline_m_b2)

        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
        await callback.message.edit_text(text=f'ID: *{l["id_ship"]}*\n'
                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                  f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?', parse_mode='Markdown',
                             reply_markup=inline_m)
        await callback.answer()
    elif 'logisnoyes_' in callback.data:
        await callback.message.delete()
        list_call = callback.data.split('_')
        id_ship = list_call[1]
        update(f"UPDATE shipping SET status_ship = '–û—Ç–º–µ–Ω–µ–Ω' WHERE id_ship = '{id_ship}'", user)
        nons = selone(f"SELECT nons FROM shipping WHERE id_ship = '{id_ship}'", user)['nons']
        update(f"UPDATE new_fbo SET status_zakaz = 100 WHERE nons = '{nons}'", user)

        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

        list_all_users = selist(f"SELECT * FROM users", user)
        list_users = []
        for us in list_all_users:
            if 'log' in us['notif']:
                list_users.append(us)
        for user1 in list_users:
            try:
                chat_id = str(user1["id_user"])
                destination_bot = Bot(token='6490496152:AAHnBwfDRlUTyTFMOMGGCK6Eu3WejYpesIE')
                await destination_bot.send_message(chat_id, f'*–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!*\n\n'
                                                            f'ID: *{l["id_ship"]}*\n'
                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n',
                                                   parse_mode='Markdown')
            except:
                pass

        await callback.answer()
    elif 'logisnono_' in callback.data:
        list_call = callback.data.split('_')
        id_ship = list_call[1]
        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

        inline_m = InlineKeyboardMarkup(row_width=2)
        inline_m_b1 = InlineKeyboardButton(text='–í –æ—á–µ—Ä–µ–¥—å', callback_data=f'logis_{l["date_ship"]}_{l["id_ship"]}')
        inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'logisno_{l["id_ship"]}')
        inline_m_b3 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
        inline_m.add(inline_m_b1, inline_m_b2).add(inline_m_b3)


        await callback.message.edit_text(text=f'ID: *{l["id_ship"]}*\n'
                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                  f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?', parse_mode='Markdown',
                             reply_markup=inline_m)
        await callback.answer()
    elif 'logisedit_' in callback.data:
        update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
        list_call = callback.data.split('_')
        id_ship = list_call[1]
        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

        inline_m = InlineKeyboardMarkup(row_width=2)
        inline_m_b1 = InlineKeyboardButton(text='–î–∞—Ç–∞', callback_data=f'logised_–¥–∞—Ç–∞_{l["id_ship"]}')
        inline_m_b2 = InlineKeyboardButton(text='–í—Ä–µ–º—è', callback_data=f'logised_–≤—Ä–µ–º—è_{l["id_ship"]}')
        inline_m_b3 = InlineKeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data=f'logised_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_{l["id_ship"]}')
        inline_m_b4 = InlineKeyboardButton(text='–í–µ—Å', callback_data=f'logised_–≤–µ—Å_{l["id_ship"]}')
        inline_m_b5 = InlineKeyboardButton(text='–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏', callback_data=f'logised_–∞–¥—Ä–µ—Å–∑_{l["id_ship"]}')
        inline_m_b6 = InlineKeyboardButton(text='–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏', callback_data=f'logised_–∞–¥—Ä–µ—Å—Ä_{l["id_ship"]}')
        inline_m_b7 = InlineKeyboardButton(text='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f'logised_–∫–æ–º–º–µ–Ω—Ç_{l["id_ship"]}')
        inline_m_b8 = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'logisnono_{l["id_ship"]}')
        inline_m.add(inline_m_b1, inline_m_b2).add(inline_m_b3, inline_m_b4).add(inline_m_b5, inline_m_b6).add(inline_m_b7).add(inline_m_b8)


        await callback.message.edit_text(text=f'ID: *{l["id_ship"]}*\n'
                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                  f'–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', parse_mode='Markdown',
                             reply_markup=inline_m)
        await callback.answer()
    elif 'logised_' in callback.data:
        update(f"UPDATE users SET edit_log = '{callback.data}' WHERE id_user = '{user}'", user)
        list_call = callback.data.split('_')
        val_edit = list_call[1]
        id_ship = list_call[2]

        if val_edit == '–¥–∞—Ç–∞':
            val = '¬´–î–∞—Ç–∞¬ª'
        elif val_edit == '–≤—Ä–µ–º—è':
            val = '¬´–í—Ä–µ–º—è¬ª'
        elif val_edit == '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
            val = '¬´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ¬ª'
        elif val_edit == '–≤–µ—Å':
            val = '¬´–í–µ—Å¬ª'
        elif val_edit == '–∞–¥—Ä–µ—Å–∑':
            val = '¬´–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏¬ª'
        elif val_edit == '–∞–¥—Ä–µ—Å—Ä':
            val = '¬´–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏¬ª'
        elif val_edit == '–∫–æ–º–º–µ–Ω—Ç':
            val = '¬´–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª'
        else:
            val = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

        inline_m = InlineKeyboardMarkup(row_width=2)
        inline_m_b8 = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'logisedit_{l["id_ship"]}')
        inline_m.add(inline_m_b8)


        await callback.message.edit_text(text=f'ID: *{l["id_ship"]}*\n'
                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
        await callback.message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {val}')

        await callback.answer()
    elif 'edite_' in callback.data:
        id_ship = callback.data.split('_')[1]
        new_res = 'edite_' + id_ship
        update(f"UPDATE users SET act_log = '{new_res}' WHERE id_user = '{user}'", user)
        await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 21.12.2012:')
        await callback.answer()

    elif 'notif_' in callback.data:
        num_notif = callback.data.split('_')[1]

        old_list_users = selone(f"SELECT notif FROM users WHERE id_user = '{user}'", user)['notif']
        list_users = old_list_users.split(' ')

        if int(num_notif) == 1:
            if 'skaz' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'skaz':
                        del list_users[i]
                        break
            else:
                list_users.append('skaz')

        elif int(num_notif) == 2:
            if 'log' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'log':
                        del list_users[i]
                        break
            else:
                list_users.append('log')

        elif int(num_notif) == 3:
            if 'client' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'client':
                        del list_users[i]
                        break
            else:
                list_users.append('client')

        elif int(num_notif) == 4:
            if 'fbs' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'fbs':
                        del list_users[i]
                        break
            else:
                list_users.append('fbs')

        elif int(num_notif) == 5:
            if 'fbo' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'fbo':
                        del list_users[i]
                        break
            else:
                list_users.append('fbo')

        elif int(num_notif) == 6:
            if 'ypak' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'ypak':
                        del list_users[i]
                        break
            else:
                list_users.append('ypak')

        elif int(num_notif) == 7:
            if 'wood' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'wood':
                        del list_users[i]
                        break
            else:
                list_users.append('wood')

        elif int(num_notif) == 8:
            if 'admin' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'admin':
                        del list_users[i]
                        break
            else:
                list_users.append('admin')

        elif int(num_notif) == 9:
            if 'men' in old_list_users:
                for i in range(len(list_users)):
                    if list_users[i] == 'men':
                        del list_users[i]
                        break
            else:
                list_users.append('men')


        new_list = " ".join(list_users)
        update(f"UPDATE users SET notif = '{new_list}' WHERE id_user = '{user}'", user)


        list_user = selone(f"SELECT notif FROM users WHERE id_user = '{user}'", user)['notif']

        mes1 = '–¶–µ—Ö ‚ùå'
        mes2 = '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ ‚ùå'
        mes3 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –§–§ ‚ùå'
        mes4 = 'FBS ‚ùå'
        mes5 = 'FBO ‚ùå'
        mes6 = '–°–∫–ª–∞–¥ —É–ø–∞–∫–æ–≤–∫–∏ ‚ùå'
        mes7 = '–°–∫–ª–∞–¥ —Ü–µ—Ö–∞ ‚ùå'
        mes8 = '–í–∞–∂–Ω—ã–µ ‚ùå'
        mes9 = '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚ùå'

        if 'skaz' in list_user:
            mes1 = '–¶–µ—Ö ‚úÖ'

        if 'log' in list_user:
            mes2 = '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ ‚úÖ'

        if 'client' in list_user:
            mes3 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –§–§ ‚úÖ'

        if 'fbs' in list_user:
            mes4 = 'FBS ‚úÖ'

        if 'fbo' in list_user:
            mes5 = 'FBO ‚úÖ'

        if 'ypak' in list_user:
            mes6 = '–°–∫–ª–∞–¥ —É–ø–∞–∫–æ–≤–∫–∏ ‚úÖ'

        if 'wood' in list_user:
            mes7 = '–°–∫–ª–∞–¥ —Ü–µ—Ö–∞ ‚úÖ'

        if 'admin' in list_user:
            mes8 = '–í–∞–∂–Ω—ã–µ ‚úÖ'

        if 'men' in list_user:
            mes9 = '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚úÖ'

        inline_notif = InlineKeyboardMarkup(row_width=1)
        inline_notif_b1 = InlineKeyboardButton(text=mes1, callback_data='notif_1')
        inline_notif_b2 = InlineKeyboardButton(text=mes2, callback_data='notif_2')
        inline_notif_b3 = InlineKeyboardButton(text=mes3, callback_data='notif_3')
        inline_notif_b4 = InlineKeyboardButton(text=mes4, callback_data='notif_4')
        inline_notif_b5 = InlineKeyboardButton(text=mes5, callback_data='notif_5')
        inline_notif_b6 = InlineKeyboardButton(text=mes6, callback_data='notif_6')
        inline_notif_b7 = InlineKeyboardButton(text=mes7, callback_data='notif_7')
        inline_notif_b8 = InlineKeyboardButton(text=mes8, callback_data='notif_8')
        inline_notif_b9 = InlineKeyboardButton(text=mes9, callback_data='notif_9')
        inline_notif.add(inline_notif_b8).add(inline_notif_b1).add(inline_notif_b2).add(inline_notif_b3).add(
            inline_notif_b4).add(inline_notif_b5).add(inline_notif_b6).add(inline_notif_b7).add(inline_notif_b9)

        await callback.message.edit_text(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', reply_markup=inline_notif)
        await callback.answer()

    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    elif 'reqv_' in callback.data:
        id_user = callback.data.split('_')[1]

        list_values = selist(f"SELECT name_user, sbp_num, card_num FROM users WHERE id_user = '{id_user}'", user)[0]


        name_user = list_values['name_user']
        sbp_num = list_values['sbp_num'][:11]
        sbp_name = list_values['sbp_num'][11:]
        card_num = list_values['card_num']

        await callback.message.edit_text(text=f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫: *{name_user}*\n\n–°–ë–ü: `{sbp_num}`*{sbp_name}*\n\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: `{card_num}`', parse_mode='Markdown')
        await callback.answer()

    # –û—Ç–ø—Ä–∞–≤–∫–∏
    elif 'upnaqr_' in callback.data:
        id_sup = callback.data.split('_')[1]
        update(f"UPDATE wood SET status_ship = '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∂–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏' WHERE id_sup = '{id_sup}'", user)
        await callback.message.edit_text(text=f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Ç—Ä–æ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –º–∞—à–∏–Ω—É!')
        await callback.answer()
    elif 'otprav_' in callback.data:
        id_sup = callback.data.split('_')[1]
        update(f"UPDATE wood SET status_ship = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' WHERE id_sup = '{id_sup}'", user)

        chat_id = selone(f"SELECT id_work FROM wood WHERE id_sup = '{id_sup}'", user)['id_work']

        destination_bot = Bot(token='6629342340:AAG_DI1HQprpkkA5Ruwfd3E6kLO4tmdbXfw')
        await destination_bot.send_message(chat_id, f'‚úÖ –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å *ID {id_sup} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É*', parse_mode='Markdown')

        await callback.message.edit_text(text=f'–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!')
        await callback.answer()
    elif 'sync_' in callback.data:
        type_sync = callback.data.split('_')[1]
        await callback.answer()
        if type_sync == 'ras':
            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü•üü•üü•üü•üü•üü•üü•üü•üü•üü•')

            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
            worksheet = sh.worksheet('–†–∞—Å—Ö–æ–¥ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã')

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü•üü•üü•üü•üü•üü•üü•üü•üü•')

            # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –∞—Ä–µ–Ω–¥–∞
            list_value_arenda = worksheet.col_values(2)
            list_items_arenda = []

            for val in list_value_arenda:
                if len(val) == 0 or val == '–ê—Ä–µ–Ω–¥–∞':
                    pass
                else:
                    list_items_arenda.append(val)

            items_arenda = '&'.join(list_items_arenda)

            # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã —Ñ–æ—Ç
            list_value_fot = worksheet.col_values(3)
            list_items_fot = []

            for val in list_value_fot:
                if len(val) == 0 or val == '–§–û–¢':
                    pass
                else:
                    list_items_fot.append(val)

            items_fot = '&'.join(list_items_fot)

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü•üü•üü•üü•üü•üü•üü•üü•')

            # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
            list_value_rashod = worksheet.col_values(4)
            list_items_rashod = []

            for val in list_value_rashod:
                if len(val) == 0 or val == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                    pass
                else:
                    list_items_rashod.append(val)

            items_rashod = '&'.join(list_items_rashod)

            # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            list_value_instr = worksheet.col_values(5)
            list_items_instr = []

            for val in list_value_instr:
                if len(val) == 0 or val == '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã':
                    pass
                else:
                    list_items_instr.append(val)

            items_instr = '&'.join(list_items_instr)

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü•üü•üü•üü•üü•üü•üü•')

            # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            list_value_log = worksheet.col_values(6)
            list_items_log = []

            for val in list_value_log:
                if len(val) == 0 or val == '–õ–æ–≥–∏—Å—Ç–∏–∫–∞':
                    pass
                else:
                    list_items_log.append(val)

            items_log = '&'.join(list_items_log)

            # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –ü—Ä–æ—á–µ–µ
            list_value_proch = worksheet.col_values(7)
            list_items_proch = []

            for val in list_value_proch:
                if len(val) == 0 or val == '–ü—Ä–æ—á–µ–µ':
                    pass
                else:
                    list_items_proch.append(val)

            items_proch = '&'.join(list_items_proch)

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü•üü•üü•üü•üü•üü•')

            # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –ê—É—Ç—Å–æ—Ä—Å
            list_value_auts = worksheet.col_values(8)
            list_items_auts = []

            for val in list_value_auts:
                if len(val) == 0 or val == '–ê—É—Ç—Å–æ—Ä—Å':
                    pass
                else:
                    list_items_auts.append(val)

            items_auts = '&'.join(list_items_auts)

            create(f"REPLACE INTO ras(type_col, arenda, fot, rashod, instr, log, proch, auts) VALUES ('kontr', '{items_arenda}', '{items_fot}', '{items_rashod}', '{items_instr}', '{items_log}', '{items_proch}', '{items_auts}')", user)

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü•üü•üü•üü•üü•')

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
            worksheet_2 = sh.worksheet('–†–∞—Å—Ö–æ–¥ –ü—Ä–µ–¥–º–µ—Ç—ã')

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü©üü•üü•üü•üü•')

            # –ø—Ä–µ–¥–º–µ—Ç—ã –∞—Ä–µ–Ω–¥–∞
            list_value_arenda = worksheet_2.col_values(2)
            list_items_arenda = []

            for val in list_value_arenda:
                if len(val) == 0 or val == '–ê—Ä–µ–Ω–¥–∞':
                    pass
                else:
                    list_items_arenda.append(val)

            items_arenda = '&'.join(list_items_arenda)

            # –ø—Ä–µ–¥–º–µ—Ç—ã —Ñ–æ—Ç
            list_value_fot = worksheet_2.col_values(3)
            list_items_fot = []

            for val in list_value_fot:
                if len(val) == 0 or val == '–§–û–¢':
                    pass
                else:
                    list_items_fot.append(val)

            items_fot = '&'.join(list_items_fot)

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü©üü©üü•üü•üü•')

            # –ø—Ä–µ–¥–º–µ—Ç—ã –†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
            list_value_rashod = worksheet_2.col_values(4)
            list_items_rashod = []

            for val in list_value_rashod:
                if len(val) == 0 or val == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                    pass
                else:
                    list_items_rashod.append(val)

            items_rashod = '&'.join(list_items_rashod)

            # –ø—Ä–µ–¥–º–µ—Ç—ã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            list_value_instr = worksheet_2.col_values(5)
            list_items_instr = []

            for val in list_value_instr:
                if len(val) == 0 or val == '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã':
                    pass
                else:
                    list_items_instr.append(val)

            items_instr = '&'.join(list_items_instr)

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü©üü©üü©üü•üü•')

            # –ø—Ä–µ–¥–º–µ—Ç—ã –õ–æ–≥–∏—Å—Ç–∏–∫–∞
            list_value_log = worksheet_2.col_values(6)
            list_items_log = []

            for val in list_value_log:
                if len(val) == 0 or val == '–õ–æ–≥–∏—Å—Ç–∏–∫–∞':
                    pass
                else:
                    list_items_log.append(val)

            items_log = '&'.join(list_items_log)

            # –ø—Ä–µ–¥–º–µ—Ç—ã –ü—Ä–æ—á–µ–µ
            list_value_proch = worksheet_2.col_values(7)
            list_items_proch = []

            for val in list_value_proch:
                if len(val) == 0 or val == '–ü—Ä–æ—á–µ–µ':
                    pass
                else:
                    list_items_proch.append(val)

            items_proch = '&'.join(list_items_proch)

            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü©üü©üü©üü©üü•')

            # –ø—Ä–µ–¥–º–µ—Ç—ã –ê—É—Ç—Å–æ—Ä—Å
            list_value_auts = worksheet_2.col_values(8)
            list_items_auts = []

            for val in list_value_auts:
                if len(val) == 0 or val == '–ê—É—Ç—Å–æ—Ä—Å':
                    pass
                else:
                    list_items_auts.append(val)

            items_auts = '&'.join(list_items_auts)

            create(f"REPLACE INTO ras(type_col, arenda, fot, rashod, instr, log, proch, auts) VALUES ('pred', '{items_arenda}', '{items_fot}', '{items_rashod}', '{items_instr}', '{items_log}', '{items_proch}', '{items_auts}')", user)


            await callback.message.edit_text(text='‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
        elif type_sync == 'req':
            # –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü•üü•üü•üü•üü•üü•üü•üü•üü•üü•')
            worksheet_2 = sh.worksheet('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')
            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü•üü•üü•üü•üü•üü•üü•')
            list_value_id = worksheet_2.col_values(3)
            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü•üü•üü•üü•üü•')
            list_value_sbp = worksheet_2.col_values(4)
            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü©üü©üü•üü•üü•')
            list_value_card = worksheet_2.col_values(5)
            await callback.message.edit_text(text='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...\nüü©üü©üü©üü©üü©üü©üü©üü©üü©üü•')

            for i in range(len(list_value_id)):
                if len(list_value_id[i]) == 0 or i == 0 or selone(f"SELECT id_user FROM users WHERE id_user = '{list_value_id[i]}'", user) is None:
                    pass
                else:
                    update(f"UPDATE users SET sbp_num = '{list_value_sbp[i]}' WHERE id_user = '{list_value_id[i]}'", user)
                    update(f"UPDATE users SET card_num = '{list_value_card[i]}' WHERE id_user = '{list_value_id[i]}'", user)
            await callback.message.edit_text(text='‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
    elif 'crm' == callback.data.split('_')[0]:
        await callback.answer()
        inline_key = InlineKeyboardMarkup(row_width=1)
        inline_key_b1 = InlineKeyboardButton(text='...–∂–¥–∏—Ç–µ...', callback_data='...')
        inline_key.add(inline_key_b1)
        await callback.message.edit_reply_markup(inline_key)

        type_crm = callback.data.split('_')[1]
        num_row = int(callback.data.split('_')[2]) + 1

        if type_crm == 'done':
            sh.worksheet('CRM').update(f'D{num_row}', '–ì–æ—Ç–æ–≤–æ')
            await callback.message.edit_text(text=f'‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
        elif type_crm == 'prin':
            values_list = sh.worksheet('CRM').row_values(num_row)
            sh.worksheet('CRM').update(f'D{num_row}', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')

            inline_key=InlineKeyboardMarkup(row_width=1)
            inline_key_b1 = InlineKeyboardButton(text='‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å ‚úÖ', callback_data=f'crm_done_{num_row - 1}')
            inline_key.add(inline_key_b1)
            await callback.message.edit_text(text=f'–ó–∞–¥–∞—á–∞ —Å –Ω–æ–º–µ—Ä–æ–º <b>{num_row}</b>:\n'
                                                  f'<b>{values_list[1]}</b>\n\n'
                                                  f'–î–µ–¥–ª–∞–π–Ω: <b>{values_list[2]}</b>\n'
                                                  f'–°—Ç–∞—Ç—É—Å: <b>üõ† –í –ø—Ä–æ—Ü–µ—Å—Å–µ</b>', reply_markup=inline_key)
    elif 'zd' == callback.data.split('_')[0]:
        await callback.answer()
        if callback.data.split('_')[1] == 'korrast':
            update(f"UPDATE users SET act_sk = 'zd_korrast_' WHERE id_user = '{user}'", user)
            await callback.message.edit_text(text=f'–°–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ–±–æ–∫ –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö?')
        elif callback.data.split('_')[1] == 'raz1rast':
            update(f"UPDATE users SET act_sk = 'zd_raz1rast_' WHERE id_user = '{user}'", user)
            await callback.message.edit_text(text=f'–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–∞—Ç–æ–∫ 1 –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö?')
        elif callback.data.split('_')[1] == 'raz2rast':
            update(f"UPDATE users SET act_sk = 'zd_raz2rast_' WHERE id_user = '{user}'", user)
            await callback.message.edit_text(text=f'–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–∞—Ç–æ–∫ 2 –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö?')
        elif callback.data.split('_')[1] == 'furrast':
            update(f"UPDATE users SET act_sk = 'zd_furrast_' WHERE id_user = '{user}'", user)
            await callback.message.edit_text(text=f'–°–∫–æ–ª—å–∫–æ —Ñ—É—Ä–Ω–∏—Ç—É—Ä –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö?')
    elif callback.data == '...':
        await callback.answer()



@db.message_handler()
async def send_text(message: types.Message):
    user = message.chat.id

    list_ff = selist(f"SELECT * FROM warehouse_ff WHERE min_count <> -1", user)
    for item in list_ff:
        if item['count_item'] < item['min_count']:
            delta_1 = datetime.timedelta(hours=5)
            now = datetime.datetime.now() + delta_1
            if int(now.day) < 10:
                day_edit = '0' + str(now.day)
            else:
                day_edit = now.day

            if int(now.month) < 10:
                month_edit = '0' + str(now.month)
            else:
                month_edit = now.month
            date_create = f'{day_edit}.{month_edit}.{now.year}'
            if item['date_say'] != date_create:
                name_item = item['name_item']
                update(f"UPDATE warehouse_ff SET date_say = '{date_create}' WHERE name_item = '{name_item}'", user)
                list_all_users = selist(f"SELECT * FROM users", user)
                list_user = []
                for us in list_all_users:
                    if 'ypak' in us['notif']:
                        list_user.append(us)

                for user1 in list_user:
                    try:
                        chat_id = str(user1["id_user"])
                        await bot.send_message(chat_id, text=f'üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶\n\n'
                                                             f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–∏ <b>{item["name_item"]}</b> –Ω–∞ –£–ø–∞–∫–æ–≤–∫–µ: <b>{item["count_item"]}</b>\n\n'
                                                             f'–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ <b>{item["min_count"]}</b>\n\n'
                                                             f'üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶üü¶')
                    except:
                        pass

    list_c = selist(f"SELECT * FROM warehouse_c WHERE min_count <> -1", user)
    for item in list_c:
        if item['count_item'] < 0 and selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
            list_all_users = selist(f"SELECT * FROM users", user)
            list_user = []
            for us in list_all_users:
                if 'wood' in us['notif']:
                    list_user.append(us)

            for user1 in list_user:
                try:
                    chat_id = str(user1["id_user"])
                    await bot.send_message(chat_id, text=f'üüßüüßüüßüüßüüßüüßüüßüüßüüßüüßüüßüüßüüß\n\n'
                                                         f'–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–∏ <b>{item["name_item"]}</b> –≤ —Ü–µ—Ö—É!\n'
                                                         f'–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: <b>{item["ed"]}</b>\n\n'
                                                         f'<b>–ù–ï–û–ë–•–û–î–ò–ú–û –°–î–ï–õ–ê–¢–¨ –ü–ï–†–ï–°–ß–ï–¢!</b>\n\n'
                                                         f'üüßüüßüüßüüßüüßüüßüüßüüßüüßüüßüüßüüßüüß')
                except:
                    pass
        elif item['count_item'] < item['min_count']:
            delta_1 = datetime.timedelta(hours=5)
            now = datetime.datetime.now() + delta_1
            if int(now.day) < 10:
                day_edit = '0' + str(now.day)
            else:
                day_edit = now.day

            if int(now.month) < 10:
                month_edit = '0' + str(now.month)
            else:
                month_edit = now.month
            date_create = f'{day_edit}.{month_edit}.{now.year}'
            if item['date_say'] != date_create:
                name_item = item['name_item']
                update(f"UPDATE warehouse_c SET date_say = '{date_create}' WHERE name_item = '{name_item}'", user)
                list_all_users = selist(f"SELECT * FROM users", user)
                list_user = []
                for us in list_all_users:
                    if 'wood' in us['notif']:
                        list_user.append(us)

                for user1 in list_user:
                    try:
                        chat_id = str(user1["id_user"])
                        await bot.send_message(chat_id, text=f'üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•\n\n'
                                                             f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–∏ <b>{item["name_item"]}</b> –≤ —Ü–µ—Ö—É: <b>{item["count_item"]}</b>\n'
                                                             f'–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: <b>{item["ed"]}</b>\n\n'
                                                             f'–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ <b>{item["min_count"]}</b>\n\n'
                                                             f'üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•')
                    except:
                        pass

    datework = str(datetime.datetime.now())[:10]

    delta_1 = datetime.timedelta(hours=5)
    now = datetime.datetime.now() + delta_1
    if selone(f"SELECT count_retail FROM users WHERE id_user = 395784406", user)['count_retail'] == 2:
        if int(now.hour) >= 22:
            list_all_users = selist(f"SELECT * FROM users", user)
            list_user = []
            for us in list_all_users:
                if 'skaz' in us['notif']:
                    list_user.append(us)

            for user1 in list_user:
                try:
                    chat_id = str(user1["id_user"])
                    destination_bot = Bot(token='6682205213:AAFFV1avM8cVCZhgv-K8pzKeJ_c20Wle_P4')
                    await destination_bot.send_message(chat_id, 'üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•'
                                                                '\n–°–º–µ–Ω–∞ –≤ –¶–µ—Ö—É –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞! –ó–∞–∫—Ä–æ–π —Å–º–µ–Ω—É!'
                                                                '\nüü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•üü•')
                except:
                    pass

    delta_1 = datetime.timedelta(hours=5)
    now = datetime.datetime.now() + delta_1
    if selone(f"SELECT driver FROM users WHERE id_user = 395784406", user)['driver'] == 2:
        if int(now.hour) >= 21:
            list_all_users = selist(f"SELECT * FROM users", user)
            list_user = []
            for us in list_all_users:
                if 'log' in us['notif']:
                    list_user.append(us)

            for user1 in list_user:
                try:
                    chat_id = str(user1["id_user"])
                    destination_bot = Bot(token='6490496152:AAHnBwfDRlUTyTFMOMGGCK6Eu3WejYpesIE')
                    await destination_bot.send_message(chat_id, 'üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©'
                                                                '\n–°–º–µ–Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞! –ó–∞–∫—Ä–æ–π —Å–º–µ–Ω—É!'
                                                                '\nüü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©üü©')
                except:
                    pass

    if user == -1001933713976 or user == -984607796 or user == -1002146643966:
        pass

    elif selone(f"SELECT id_user FROM users WHERE id_user = '{user}'", user) is None:
        await message.answer(text=texts.start_text)

    else:
        if '*' in message.text or '_' in message.text:
            await message.answer(text='–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å * –∏–ª–∏ _')

        else:
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if message.text == markups.menu_main:
                defaul_values(user)
                await message.answer(text=texts.menu_name, reply_markup=markups.menu_admin)

            # –û—Ç–º–µ–Ω–∞ –≥–ª–∞–≤–Ω–æ–µ
            elif message.text == markups.menu_back_main:
                defaul_values(user)
                await message.answer(text=texts.menu_name, reply_markup=markups.menu_admin)

            # –ú–µ–Ω—é –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_admin_b2:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    await message.answer(text=texts.menu_retail, reply_markup=markups.menu_retail)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –ú–µ–Ω—é –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            elif message.text == markups.menu_admin_b5:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    await message.answer(text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markups.menu_set_admin)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            elif message.text == markups.menu_set_admin_b2:
                inline_key = InlineKeyboardMarkup(row_width=1)
                inline_key_b1 = InlineKeyboardButton(text='–†–∞—Å—Ö–æ–¥', callback_data=f'sync_ras')
                inline_key_b2 = InlineKeyboardButton(text='–†–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data=f'sync_req')
                inline_key.add(inline_key_b1).add(inline_key_b2)
                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=inline_key)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            elif message.text == markups.menu_set_admin_b1:
                list_user = selone(f"SELECT notif FROM users WHERE id_user = '{user}'", user)['notif']

                mes1 = '–¶–µ—Ö ‚ùå'
                mes2 = '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ ‚ùå'
                mes3 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –§–§ ‚ùå'
                mes4 = 'FBS ‚ùå'
                mes5 = 'FBO ‚ùå'
                mes6 = '–°–∫–ª–∞–¥ —É–ø–∞–∫–æ–≤–∫–∏ ‚ùå'
                mes7 = '–°–∫–ª–∞–¥ —Ü–µ—Ö–∞ ‚ùå'
                mes8 = '–í–∞–∂–Ω—ã–µ ‚ùå'
                mes9 = '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚ùå'


                if 'skaz' in list_user:
                    mes1 = '–¶–µ—Ö ‚úÖ'

                if 'log' in list_user:
                    mes2 = '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ ‚úÖ'

                if 'client' in list_user:
                    mes3 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –§–§ ‚úÖ'

                if 'fbs' in list_user:
                    mes4 = 'FBS ‚úÖ'

                if 'fbo' in list_user:
                    mes5 = 'FBO ‚úÖ'

                if 'ypak' in list_user:
                    mes6 = '–°–∫–ª–∞–¥ —É–ø–∞–∫–æ–≤–∫–∏ ‚úÖ'

                if 'wood' in list_user:
                    mes7 = '–°–∫–ª–∞–¥ —Ü–µ—Ö–∞ ‚úÖ'

                if 'admin' in list_user:
                    mes8 = '–í–∞–∂–Ω—ã–µ ‚úÖ'

                if 'men' in list_user:
                    mes9 = '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç ‚úÖ'

                inline_notif = InlineKeyboardMarkup(row_width=1)
                inline_notif_b1 = InlineKeyboardButton(text=mes1, callback_data='notif_1')
                inline_notif_b2 = InlineKeyboardButton(text=mes2, callback_data='notif_2')
                inline_notif_b3 = InlineKeyboardButton(text=mes3, callback_data='notif_3')
                inline_notif_b4 = InlineKeyboardButton(text=mes4, callback_data='notif_4')
                inline_notif_b5 = InlineKeyboardButton(text=mes5, callback_data='notif_5')
                inline_notif_b6 = InlineKeyboardButton(text=mes6, callback_data='notif_6')
                inline_notif_b7 = InlineKeyboardButton(text=mes7, callback_data='notif_7')
                inline_notif_b8 = InlineKeyboardButton(text=mes8, callback_data='notif_8')
                inline_notif_b9 = InlineKeyboardButton(text=mes9, callback_data='notif_9')
                inline_notif.add(inline_notif_b8).add(inline_notif_b1).add(inline_notif_b2).add(inline_notif_b3).add(inline_notif_b4).add(inline_notif_b5).add(inline_notif_b6).add(inline_notif_b7).add(inline_notif_b9)

                await message.answer(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', reply_markup=inline_notif)
                await message.answer(text=f'–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ {markups.menu_back_set}', reply_markup=markups.back_set)

            # –û—Ç–º–µ–Ω–∞ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_back_set:
                defaul_values(user)
                await message.answer(text='–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markups.menu_set_admin)

            # –û—Ç–º–µ–Ω–∞ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_back_retail:
                defaul_values(user)
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    await message.answer(text=texts.menu_retail, reply_markup=markups.menu_retail)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
            elif message.text == markups.menu_retail_b8:
                delta_1 = datetime.timedelta(hours=5)
                now = datetime.datetime.now() + delta_1
                inline_main = InlineKeyboardMarkup(row_width=1)
                await message.answer(f'–ú–∏–Ω—É—Ç–æ—á–∫—É...')
                check = 0

                for i in range(2023, int(now.year) + 1):
                    try:
                        num_row = 1
                        worksheet = sh.worksheet(f"–†–∞—Å—Ö–æ–¥ {i}")
                        values_list = worksheet.col_values(2)
                        pay_list = worksheet.col_values(10)
                        inline_main = InlineKeyboardMarkup(row_width=1)
                        for value in range(1, len(values_list)):
                            if pay_list[value] == '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ':
                                check = 1
                                name_value = ' ¬´' + worksheet.row_values(num_row + 1)[2] + '¬ª ' + worksheet.row_values(num_row + 1)[3] + \
                                             ' ‚Äî ' + worksheet.row_values(num_row + 1)[7]

                                inline_main_b = InlineKeyboardButton(text=name_value, callback_data=f'rshod_{num_row + 1}_{i}')
                                inline_main.add(inline_main_b)
                            num_row += 1
                    except Exception as error:
                        await message.answer(error)

                if check == 1:
                    await message.answer(f'–ß—Ç–æ –æ–ø–ª–∞—á–µ–Ω–æ?', reply_markup=inline_main)
                    await message.answer(f'–î–ª –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞', reply_markup=markups.back_retail)
                else:
                    await message.answer('–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –Ω–µ—Ç!')

            # –°–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω
            elif message.text == markups.menu_retail_b4:
                res = 'plan'
                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                inline_date = ReplyKeyboardMarkup(resize_keyboard=True)
                inline_date_b0 = f'{sk.date_yes_create()}'
                inline_date_b1 = f'{sk.date_create()}'
                inline_date_b2 = f'{sk.date_tomorrow_create()}'
                menu_back = '–û—Ç–º–µ–Ω–∞ üõë'
                inline_date.add(inline_date_b0, inline_date_b1, inline_date_b2).add(menu_back)
                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω <i>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.11.2023)</i>', reply_markup=inline_date)
            elif selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'] == 'plan':
                if len(message.text) == 10 and len(message.text.split('.')) == 3 and message.text.split('.')[0].isdigit() and message.text.split('.')[1].isdigit() and message.text.split('.')[2].isdigit():
                    try:
                        await message.answer(text=f'–ú–∏–Ω—É—Ç–æ—á–∫—É...', reply_markup=markups.back_retail)
                        daynow = message.text.split('.')[0]
                        monthnow = message.text.split('.')[1]
                        yearnow = message.text.split('.')[2]

                        if now.month == 1:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –Ø–Ω–≤–∞—Ä—å {now.year}"
                        elif now.month == 2:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –§–µ–≤—Ä–∞–ª—å {now.year}"
                        elif now.month == 3:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞—Ä—Ç {now.year}"
                        elif now.month == 4:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–ø—Ä–µ–ª—å {now.year}"
                        elif now.month == 5:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞–π {now.year}"
                        elif now.month == 6:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–Ω—å {now.year}"
                        elif now.month == 7:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–ª—å {now.year}"
                        elif now.month == 8:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–≤–≥—É—Å—Ç {now.year}"
                        elif now.month == 9:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –°–µ–Ω—Ç—è–±—Ä—å {now.year}"
                        elif now.month == 10:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –û–∫—Ç—è–±—Ä—å {now.year}"
                        elif now.month == 11:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ù–æ—è–±—Ä—å {now.year}"
                        elif now.month == 12:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –î–µ–∫–∞–±—Ä—å {now.year}"

                        worksheet_2 = sh.worksheet(name_list)
                        num_row = int(daynow) + 1
                        cel = f'A{num_row}'
                        plan = worksheet_2.acell(cel).value

                        res = f'planznach_{message.text}'
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)

                        await message.answer(text=f'–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–ª–∞–Ω —Å—Ç–æ–∏—Ç <b>{plan} —à—Ç.</b>')
                        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')

                    except Exception as ex:
                        await message.answer(text=f'–û—à–∏–±–∫–∞ {ex}! –ù–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=markups.back_retail)
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.11.2023!')
            elif selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')[0] == 'planznach':
                if message.text.isdigit():
                    try:
                        await message.answer(text=f'–ú–∏–Ω—É—Ç–æ—á–∫—É...', reply_markup=markups.back_retail)
                        daynow = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')[1].split('.')[0]
                        monthnow = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')[1].split('.')[1]
                        yearnow = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')[1].split('.')[2]

                        if now.month == 1:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –Ø–Ω–≤–∞—Ä—å {now.year}"
                        elif now.month == 2:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –§–µ–≤—Ä–∞–ª—å {now.year}"
                        elif now.month == 3:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞—Ä—Ç {now.year}"
                        elif now.month == 4:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–ø—Ä–µ–ª—å {now.year}"
                        elif now.month == 5:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞–π {now.year}"
                        elif now.month == 6:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–Ω—å {now.year}"
                        elif now.month == 7:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–ª—å {now.year}"
                        elif now.month == 8:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–≤–≥—É—Å—Ç {now.year}"
                        elif now.month == 9:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –°–µ–Ω—Ç—è–±—Ä—å {now.year}"
                        elif now.month == 10:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –û–∫—Ç—è–±—Ä—å {now.year}"
                        elif now.month == 11:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ù–æ—è–±—Ä—å {now.year}"
                        elif now.month == 12:
                            name_list = f"–ì—Ä–∞—Ñ–∏–∫ –î–µ–∫–∞–±—Ä—å {now.year}"

                        worksheet_2 = sh.worksheet(name_list)
                        num_row = int(daynow) + 1
                        cel = f'A{num_row}'

                        plan = worksheet_2.update(cel, int(message.text))

                        update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)

                        await message.answer(text=f'–ü–ª–∞–Ω –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=markups.menu_retail)

                    except Exception as ex:
                        await message.answer(text=f'–û—à–∏–±–∫–∞ {ex}! –ù–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=markups.back_retail)
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')

            # –†–∞—Å—Ö–æ–¥ –ú–µ–±–µ–ª—å
            elif selone(f"SELECT act_retail FROM users WHERE id_user = '{user}'", user)['act_retail'] == 3:
                if message.text.isdigit():
                    update(f"UPDATE users SET word_6 = '{message.text}' WHERE id_user = '{user}'", user)
                    if selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                        update(f"UPDATE users SET act_retail = 0 WHERE id_user = '{user}'", user)
                        if selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8'] == "–û–ø–ª–∞—á–µ–Ω–æ":
                            await message.answer(text="–° –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞?", reply_markup=markups.inline_pay)
                        else:
                            await message.answer(text="–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏)", reply_markup=markups.inline_pay_3)
                    if selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–ê—É—Ç—Å–æ—Ä—Å':
                        update(f"UPDATE users SET act_retail = 0 WHERE id_user = '{user}'", user)
                        if selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8'] == "–û–ø–ª–∞—á–µ–Ω–æ":
                            await message.answer(text="–° –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞?", reply_markup=markups.inline_pay)
                        else:
                            await message.answer(text="–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏)", reply_markup=markups.inline_pay_3)
                else:
                    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º:")
            elif selone(f"SELECT act_retail FROM users WHERE id_user = '{user}'", user)['act_retail'] == 2:
                update(f"UPDATE users SET word_5 = '{message.text}' WHERE id_user = '{user}'", user)
                if selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–§–û–¢':
                    update(f"UPDATE users SET act_retail = 0 WHERE id_user = '{user}'", user)
                    if selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8'] == "–û–ø–ª–∞—á–µ–Ω–æ":
                        await message.answer(text="–° –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞?", reply_markup=markups.inline_pay)
                    else:
                        await message.answer(text="–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏)", reply_markup=markups.inline_pay_3)
                elif selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã':
                    update(f"UPDATE users SET act_retail = 0 WHERE id_user = '{user}'", user)
                    if selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8'] == "–û–ø–ª–∞—á–µ–Ω–æ":
                        await message.answer(text="–° –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞?", reply_markup=markups.inline_pay)
                    else:
                        await message.answer(text="–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏)", reply_markup=markups.inline_pay_3)
                else:
                    update(f"UPDATE users SET act_retail = 0 WHERE id_user = '{user}'", user)
                    if selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8'] == "–û–ø–ª–∞—á–µ–Ω–æ":
                        await message.answer(text="–° –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞?", reply_markup=markups.inline_pay)
                    else:
                        await message.answer(text="–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏)", reply_markup=markups.inline_pay_3)
            elif selone(f"SELECT act_retail FROM users WHERE id_user = '{user}'", user)['act_retail'] == 1:
                if message.text.isdigit() or "," in message.text:
                    update(f"UPDATE users SET word_4 = '{message.text}' WHERE id_user = '{user}'", user)
                    if selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–ê—Ä–µ–Ω–¥–∞':
                        update(f"UPDATE users SET word_5 = ' ' WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET word_6 = ' ' WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET act_retail = 0 WHERE id_user = '{user}'", user)
                        if selone(f"SELECT word_8 FROM users WHERE id_user = '{user}'", user)['word_8'] == "–û–ø–ª–∞—á–µ–Ω–æ":
                            await message.answer(text="–° –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞?", reply_markup=markups.inline_pay)
                        else:
                            await message.answer(text="–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏)", reply_markup=markups.inline_pay_3)

                    elif selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–§–û–¢':
                        update(f"UPDATE users SET act_retail = 2 WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET word_6 = ' ' WHERE id_user = '{user}'", user)
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
                    elif selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                        update(f"UPDATE users SET act_retail = 3 WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET word_5 = ' ' WHERE id_user = '{user}'", user)
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
                    elif selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–õ–æ–≥–∏—Å—Ç–∏–∫–∞':
                        update(f"UPDATE users SET act_retail = 2 WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET word_6 = ' ' WHERE id_user = '{user}'", user)
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
                    elif selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã':
                        update(f"UPDATE users SET act_retail = 2 WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET word_6 = ' ' WHERE id_user = '{user}'", user)
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
                    elif selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–ü—Ä–æ—á–µ–µ':
                        update(f"UPDATE users SET act_retail = 2 WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET word_6 = ' ' WHERE id_user = '{user}'", user)
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
                    elif selone(f"SELECT word_1 FROM users WHERE id_user = '{user}'", user)['word_1'] == '–ê—É—Ç—Å–æ—Ä—Å':
                        update(f"UPDATE users SET act_retail = 3 WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET word_5 = ' ' WHERE id_user = '{user}'", user)
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
                else:
                    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º!:')
            elif message.text == markups.menu_retail_b2:
                await message.answer(text='–û–ø–ª–∞—á–µ–Ω–æ?', reply_markup=markups.inline_done)
                await message.answer(text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'", reply_markup=markups.back_retail)

            # –†–µ–∫–≤–∏–∑–∏—Ç—ã
            elif message.text == markups.menu_retail_b3:
                inline_key = InlineKeyboardMarkup(row_width=1)
                list_values = selist(f"SELECT id_user, name_user, sbp_num, card_num FROM users", user)

                for val in list_values:
                    id_user = val['id_user']
                    if len(selone(f"SELECT sbp_num FROM users WHERE id_user = '{id_user}'", user)['sbp_num']) > 3:
                        name_user = val['name_user']
                        inline_key_b = InlineKeyboardButton(text=name_user, callback_data=f'reqv_{id_user}')
                        inline_key.add(inline_key_b)

                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=inline_key)

            # CRM
            elif message.text == markups.menu_retail_b6:
                await message.answer(text='üîÅ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Ç–∞–±–ª–∏—Ü–µ...', reply_markup=markups.back_retail)
                worksheet = sh.worksheet('CRM')
                list_of_lists = worksheet.get_all_values()

                if user == 395784406:
                    name_user = '–†–æ–º–∞'
                elif user == 422836180:
                    name_user = '–ê–π–Ω—É—Ä –ö.'
                elif user == 279718355:
                    name_user = '–ê–π–Ω—É—Ä –•.'
                elif user == 1794088530:
                    name_user = '–§–∞—Ä—Ö–∞—Ç'
                else:
                    name_user = ''

                if name_user != '':
                    check = 0
                    await message.answer(text='–°–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:')
                    for l in range(len(list_of_lists)):
                        if list_of_lists[l][0] == name_user:
                            if list_of_lists[l][3] == '–ù–µ –Ω–∞—á–∞–ª':
                                inline_key = InlineKeyboardMarkup(row_width=1)
                                inline_key_b1 = InlineKeyboardButton(text='üõ† –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É üõ†', callback_data=f'crm_prin_{l}')
                                inline_key.add(inline_key_b1)
                                check = 1
                                await message.answer(text=f'–ó–∞–¥–∞—á–∞ —Å –Ω–æ–º–µ—Ä–æ–º <b>{l + 1}</b>:\n'
                                                          f'<b>{list_of_lists[l][1]}</b>\n\n'
                                                          f'–î–µ–¥–ª–∞–π–Ω: <b>{list_of_lists[l][2]}</b>\n'
                                                          f'–°—Ç–∞—Ç—É—Å: <b>‚≠ïÔ∏è –ù–µ –Ω–∞—á–∞–ª</b>', reply_markup=inline_key)
                            elif list_of_lists[l][3] == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                                inline_key = InlineKeyboardMarkup(row_width=1)
                                inline_key_b1 = InlineKeyboardButton(text='‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å ‚úÖ', callback_data=f'crm_done_{l}')
                                inline_key.add(inline_key_b1)
                                check = 1
                                await message.answer(text=f'–ó–∞–¥–∞—á–∞ —Å –Ω–æ–º–µ—Ä–æ–º <b>{l + 1}</b>:\n'
                                                          f'<b>{list_of_lists[l][1]}</b>\n\n'
                                                          f'–î–µ–¥–ª–∞–π–Ω: <b>{list_of_lists[l][2]}</b>\n'
                                                          f'–°—Ç–∞—Ç—É—Å: <b>üõ† –í –ø—Ä–æ—Ü–µ—Å—Å–µ</b>', reply_markup=inline_key)

                    if check == 0:
                        await message.answer(text='‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç')
                else:
                    await message.answer(text='–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ CRM')

            # –í–æ–∑–≤—Ä–∞—Ç—ã
            elif message.text == markups.menu_retail_b9:
                values_list = selist(f"SELECT * FROM warehouse_refunds", user)
                res = ''

                for val in values_list:
                    res += f'<b>{val["name_item"]}</b>: {val["count_item"]}\n'

                await message.answer(text=res)

            # –ú–µ–Ω—é –°–∫–ª–∞–¥
            elif message.text == markups.menu_main_count:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ú–∞—Å—Ç–µ—Ä' or selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    await message.answer(text=texts.menu_count, reply_markup=markups.menu_count)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
            elif message.text == markups.menu_admin_b3:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ú–∞—Å—Ç–µ—Ä' or selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å' or selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–£–ø–∞–∫–æ–≤–∫–∞':
                    await message.answer(text=texts.menu_count, reply_markup=markups.menu_count)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –û—Ç–º–µ–Ω–∞ –°–∫–ª–∞–¥
            elif message.text == markups.menu_back_count:
                defaul_values(user)
                await message.answer(text=texts.menu_retail, reply_markup=markups.menu_count)

            # –û—Ç–º–µ–Ω–∞ –°–∫–ª–∞–¥ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_back_count_retail:
                defaul_values(user)
                await message.answer(text=texts.menu_count_retail, reply_markup=markups.menu_count)

            # –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –°–∫–ª–∞–¥
            elif selone(f"SELECT new_name_user FROM users WHERE id_user = '{user}'", user)['new_name_user'] == 3:
                update(f"UPDATE users SET new_name_user = 0 WHERE id_user = '{user}'", user)
                update(f"UPDATE users SET name_new_user = '{message.text}' WHERE id_user = '{user}'", user)
                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=markups.inline_add_user_count)
            elif selone(f"SELECT new_id_user FROM users WHERE id_user = '{user}'", user)['new_id_user'] == 3:
                if message.text.isdigit():
                    update(f"UPDATE users SET new_id_user = 0 WHERE id_user = '{user}'", user)
                    update(f"UPDATE users SET new_id_user_text = '{message.text}' WHERE id_user = '{user}'", user)
                    update(f"UPDATE users SET new_name_user = 3 WHERE id_user = '{user}'", user)
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                else:
                    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–∏—Å–ª–æ–º:')
            elif message.text == markups.menu_count_b1:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    update(f"UPDATE users SET new_id_user = 3 WHERE id_user = '{user}'", user)
                    await message.answer(
                        "–ü—Ä–∏—à–ª–∏—Ç–µ <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <i>(–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /info)</i>", )
                    await message.answer(text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'", reply_markup=markups.back_count)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Ü–µ—Ö–∞
            elif selone(f"SELECT act_wood FROM users WHERE id_user = '{user}'", user)['act_wood'] == 'mes':
                list_users = selist(f"SELECT id_user FROM users WHERE company = '–°–±–æ—Ä—â–∏–∫' OR company = '–ú–∞—Å—Ç–µ—Ä'", user)
                for user1 in list_users:
                    try:
                        chat_id = str(user1["id_user"])
                        destination_bot = Bot(token='6629342340:AAG_DI1HQprpkkA5Ruwfd3E6kLO4tmdbXfw')
                        await destination_bot.send_message(chat_id, message.text, parse_mode='HTML')
                    except:
                        pass
                await message.answer(
                    text='‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–í—ã –º–æ–∂–µ—Ç–µ –µ—â–µ –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞',
                    reply_markup=markups.back_count)
            elif message.text == markups.menu_count_b6:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    update(f"UPDATE users SET act_wood = 'mes' WHERE id_user = '{user}'", user)
                    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:")
                    await message.answer(text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'", reply_markup=markups.back_count)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –°–∫–ª–∞–¥
            elif selone(f"SELECT remove_user FROM users WHERE id_user = '{user}'", user)['remove_user'] == 300:
                if message.text.isdigit():
                    check = 0
                    search = selist(f"SELECT id_user, name_user FROM users WHERE company = '–ú–∞—Å—Ç–µ—Ä' OR company = '–°–±–æ—Ä—â–∏–∫'", user)
                    for i in search:
                        if int(message.text) == int(i['id_user']):
                            check = 1
                    if check == 1:
                        update(f"UPDATE users SET remove_user = 0 WHERE id_user = '{user}'", user)
                        update(f"DELETE FROM users WHERE id_user = '{message.text}'", user)
                        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
                    else:
                        await message.answer(
                            text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:')
                else:
                    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–∏—Å–ª–æ–º:')
            elif message.text == markups.menu_count_b2:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    update(f"UPDATE users SET remove_user = 300 WHERE id_user = '{user}'", user)
                    search = selist(
                        f"SELECT id_user, name_user, company FROM users WHERE company = '–ú–∞—Å—Ç–µ—Ä' OR company = '–°–±–æ—Ä—â–∏–∫'",
                        user)
                    res = ''
                    for i in search:
                        res += str(i['id_user']) + " - "
                        res += i['name_user'] + "\n"
                    await message.answer(res)
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
                    await message.answer(text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'", reply_markup=markups.back_count)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –°–∫–ª–∞–¥
            elif message.text == markups.menu_count_b3:
                admins = selist(f"SELECT id_user, name_user, company FROM users WHERE company = '–ú–∞—Å—Ç–µ—Ä' OR company = '–°–±–æ—Ä—â–∏–∫'", user)
                res = ''
                for adm in admins:
                    name_user = adm['name_user']
                    res += str(adm['id_user']) + " - "
                    res += f"<b>{name_user}</b>" + f" <i>{adm['company']}</i>\n"

                await message.answer(res)

            # –ú–µ–Ω—é –°–∫–ª–∞–¥ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_count_b5:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ú–∞—Å—Ç–µ—Ä':
                    if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                        await message.answer(text=texts.menu_count_retail, reply_markup=markups.menu_count_retail_n)
                    elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                        await message.answer(text=texts.menu_count_retail, reply_markup=markups.menu_count_retail_b)
                elif selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                        await message.answer(text=texts.menu_count_retail, reply_markup=markups.menu_count_retail_n)
                    elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                        await message.answer(text=texts.menu_count_retail, reply_markup=markups.menu_count_retail)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –û—Ç–º–µ–Ω–∞ –°–∫–ª–∞–¥ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_back_count_retail:
                defaul_values(user)
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å' or \
                        selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ú–∞—Å—Ç–µ—Ä':
                    if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                        await message.answer(text=texts.menu_count_retail, reply_markup=markups.menu_count_retail_n)
                    elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                        await message.answer(text=texts.menu_count_retail, reply_markup=markups.menu_count_retail_b)
                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –û—Å—Ç–∞—Ç–æ–∫ –°–∫–ª–∞–¥ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_count_retail_b1:
                values_list = selist(f"SELECT * FROM warehouse_c WHERE min_count <> -1", user)
                res = ''

                for val in values_list:
                    if len(str(val["count_item"])) >= 2 and str(val["count_item"])[-2] == '1':
                        res += f'<b>{val["name_item"]}</b>: {val["count_item"]} {val["ed_2"]}\n'
                    elif str(val["count_item"])[-1] == '1':
                        res += f'<b>{val["name_item"]}</b>: {val["count_item"]} {val["ed"]}\n'
                    elif str(val["count_item"])[-1] == '2' or str(val["count_item"])[-1] == '3' or str(val["count_item"])[-1] == '4':
                        res += f'<b>{val["name_item"]}</b>: {val["count_item"]} {val["ed_1"]}\n'
                    else:
                        res += f'<b>{val["name_item"]}</b>: {val["count_item"]} {val["ed_2"]}\n'

                await message.answer(text=res)

                ldsp_per = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (–ø–µ—Ä–µ–º—ã—á–∫–∞)'", user)['count_item']
                ldsp_sid = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å–∏–¥—É—à–∫–∞)'", user)['count_item']
                ldsp_spin = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å–ø–∏–Ω–∫–∞)'", user)['count_item']
                ldsp_stol = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å—Ç–æ–ª–µ—à–∫–∞)'", user)['count_item']

                max_item = max(ldsp_per, ldsp_sid, ldsp_spin, ldsp_stol)

                await message.answer(text=f'‚ùóÔ∏è –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã—Ä–æ–≤–Ω—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –õ–î–°–ü, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n'
                                          f'<i>–ü–µ—Ä–µ–º—ã—á–∫–∞:</i> <b>{max_item - ldsp_per}</b>\n'
                                          f'<i>–°–∏–¥—É—à–∫–∞:</i> <b>{max_item - ldsp_sid}</b>\n'
                                          f'<i>–°–ø–∏–Ω–∫–∞:</i> <b>{max_item - ldsp_spin}</b>\n'
                                          f'<i>–°—Ç–æ–ª–µ—à–∫–∞:</i> <b>{max_item - ldsp_stol}</b>\n\n'
                                          f'üì¶ –ë—É–¥–µ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤: <b>{max_item}</b>')

            # –ü—Ä–∏–±—ã–ª–æ –°–∫–ª–∞–¥ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_count_retail_b2:
                name_objects = selist(f"SELECT name_item FROM warehouse_c WHERE min_count <> -1", user)
                inline_obj = InlineKeyboardMarkup(row_width=1)

                for o in name_objects:
                    inline_obj_b = InlineKeyboardButton(text=o["name_item"], callback_data=f'pribmeb_{o["name_item"]}')
                    inline_obj.add(inline_obj_b)

                await message.answer(text='–ß—Ç–æ –ø—Ä–∏–±—ã–ª–æ?', reply_markup=inline_obj)
                await message.answer(text='–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞', reply_markup=markups.back_count)
            elif 'pribmeb' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    object_name = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1]
                    check_up = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[2]
                    object_count = message.text
                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)

                    name_objects = selist(f"SELECT * FROM warehouse_c", user)
                    count_obj = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '{object_name}'", user)['count_item']

                    res_ost = '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n'

                    if check_up == 'yes':
                        count_ff = selone(f"SELECT count_item FROM warehouse_ff WHERE name_item = '{object_name}'", user)['count_item']
                        update(f"UPDATE warehouse_ff SET count_item = '{int(count_ff) - int(object_count)}' WHERE name_item = '{object_name}'", user)

                    update(f"UPDATE warehouse_c SET count_item = '{int(count_obj) + int(object_count)}' WHERE name_item = '{object_name}'", user)
                    res_ost += f'<b>{object_name}</b>: {int(count_obj) + int(object_count)}\n'


                    if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                        await message.answer(text='–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É –≤ –¶–µ—Ö—É –∏–∑–º–µ–Ω–µ–Ω—ã!',
                                             reply_markup=markups.menu_count_retail_n)
                    elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                        await message.answer(text='–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É –≤ –¶–µ—Ö—É –∏–∑–º–µ–Ω–µ–Ω—ã!',
                                             reply_markup=markups.menu_count_retail_b)

                    await message.answer(text=res_ost)

                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º!')

            # –û—Ç–ø—Ä–∞–≤–∫–∏
            elif message.text == markups.menu_count_retail_b7:
                sup_list = selist(f"SELECT * FROM wood WHERE status_ship = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ—Ö—É' OR status_ship = '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∂–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏'", user)

                if len(sup_list) > 0:
                    for sup in sup_list:
                        list_det = sup['list_det'].split(' ')
                        det = ''
                        for d in list_det:
                            if d == '1':
                                det += '\n–ù–æ–∂–∫–∞ —Å—Ç—É–ª–∞'
                            elif d == '2':
                                det += '\n–ù–æ–∂–∫–∞ —Å—Ç–æ–ª–∞'
                            elif d == '3':
                                det += '\n–°–ø–∏–Ω–∫–∞ —Å—Ç—É–ª–∞'
                            elif d == '4':
                                det += '\n–°–∏–¥–µ–Ω–∏–µ —Å—Ç—É–ª–∞'
                            elif d == '5':
                                det += '\n–ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞ —Å—Ç—É–ª–∞'
                            elif d == '6':
                                det += '\n–ü–µ—Ä–µ–º—ã—á–∫–∞ —Å—Ç–æ–ª–∞'
                            elif d == '7':
                                det += '\n–°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞ –≤ —Å–±–æ—Ä–µ'
                            elif d == '8':
                                det += '\n–ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞ —Å—Ç–æ–ª–∞'
                            elif d == '9':
                                det += '\n–°—Ç–æ–ª–µ—à–Ω–∏—Ü–∞'
                            elif d == '10':
                                det += '\n–§—É—Ä–Ω–∏—Ç—É—Ä–∞'

                        mess = f'*{det}*'

                        inline_key = InlineKeyboardMarkup(row_width=1)
                        if sup["status_ship"] == '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ—Ö—É':
                            inline_key_b1 = InlineKeyboardButton(text='–£–ø–∞–∫–æ–≤–∞–ª –∏ –Ω–∞–∫–ª–µ–∏–ª QR', callback_data=f'upnaqr_{sup["id_sup"]}')
                            inline_key.add(inline_key_b1)
                            await message.answer(f'ID: {sup["id_sup"]}'
                                                 f'\nüì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏:'
                                                 f'{mess}', reply_markup=inline_key, parse_mode='Markdown')
                        else:
                            inline_key_b1 = InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏–ª', callback_data=f'otprav_{sup["id_sup"]}')
                            inline_key.add(inline_key_b1)
                            await message.answer(f'ID: {sup["id_sup"]}'
                                                 f'\nüöö –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–µ—Ç–∞–ª—è–º–∏:'
                                                 f'{mess}', reply_markup=inline_key, parse_mode='Markdown')

                else:
                    await message.answer('–û—Ç–ø—Ä–∞–≤–æ–∫ –Ω–µ—Ç!')

            # –°–¥–µ–ª–∞–Ω–æ
            elif message.text == markups.menu_count_retail_b6:
                inline_item = InlineKeyboardMarkup(row_width=1)
                inline_item_b1 = InlineKeyboardButton(text='–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π', callback_data=f'zd_korrast')
                inline_item_b2 = InlineKeyboardButton(text='–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 1', callback_data=f'zd_raz1rast')
                inline_item_b3 = InlineKeyboardButton(text='–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 2', callback_data=f'zd_raz2rast')
                inline_item_b4 = InlineKeyboardButton(text='–§—É—Ä–Ω–∏—Ç—É—Ä—ã –†–∞—Å—Ç—É—â–∏–π', callback_data=f'zd_furrast')
                inline_item.add(inline_item_b1).add(inline_item_b2).add(inline_item_b3).add(inline_item_b4)
                await message.answer(f'–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:', reply_markup=inline_item)
            elif 'zd_raz1rast_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 1'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) + int(message.text)}' WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 1'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –†–∞—Å—Ç—É—â–∏–π 1'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –†–∞—Å—Ç—É—â–∏–π 1'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–§–∞–π–ª'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–§–∞–π–ª'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–∞—Ä–∞–Ω–¥–∞—à–∏'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–ö–∞—Ä–∞–Ω–¥–∞—à–∏'", user)

                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                    await message.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ!')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º!')
            elif 'zd_raz2rast_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 2'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) + int(message.text)}' WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 2'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –†–∞—Å—Ç—É—â–∏–π 2'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –†–∞—Å—Ç—É—â–∏–π 2'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–§–∞–π–ª'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–§–∞–π–ª'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–∞—Ä–∞–Ω–¥–∞—à–∏'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–ö–∞—Ä–∞–Ω–¥–∞—à–∏'", user)

                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                    await message.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ!')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º!')
            elif 'zd_furrast_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–§—É—Ä–Ω–∏—Ç—É—Ä—ã –†–∞—Å—Ç—É—â–∏–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) + int(message.text)}' WHERE name_item = '–§—É—Ä–Ω–∏—Ç—É—Ä—ã –†–∞—Å—Ç—É—â–∏–π'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 20'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - (int(message.text) * 8)}' WHERE name_item = '–í–∏–Ω—Ç –º–µ–±–µ–ª—å–Ω—ã–π 20'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ì–∞–π–∫–∞ –≠—Ä–∏–∫—Å–æ–Ω–∞'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - (int(message.text) * 8)}' WHERE name_item = '–ì–∞–π–∫–∞ –≠—Ä–∏–∫—Å–æ–Ω–∞'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ó–∞–≥–ª—É—à–∫–∞ –±–µ–∂'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - (int(message.text) * 12)}' WHERE name_item = '–ó–∞–≥–ª—É—à–∫–∞ –±–µ–∂'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ó–∞–∂–∏–º –¥–ª—è –±—É–º–∞–≥–∏'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–ó–∞–∂–∏–º –¥–ª—è –±—É–º–∞–≥–∏'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ó–∏–ø –ø–∞–∫–µ—Ç—ã 80—Ö120'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–ó–∏–ø –ø–∞–∫–µ—Ç—ã 80—Ö120'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–æ–Ω—Ñ–∏—Ä–º–∞—Ç 7—Ö50'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - (int(message.text) * 12)}' WHERE name_item = '–ö–æ–Ω—Ñ–∏—Ä–º–∞—Ç 7—Ö50'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–®–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - (int(message.text) * 2)}' WHERE name_item = '–®–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫'", user)

                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                    await message.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ!')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º!')
            elif 'zd_korrast_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) + int(message.text)}' WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–∞—Ä—Ç–æ–Ω'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(message.text)}' WHERE name_item = '–ö–∞—Ä—Ç–æ–Ω'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–¢–µ—Ä–º–æ–∫–ª–µ–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(int(message.text) / 3)}' WHERE name_item = '–¢–µ—Ä–º–æ–∫–ª–µ–π'", user)

                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                    await message.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ!')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º!')

            # –ë—Ä–∞–∫
            elif message.text == markups.menu_count_retail_b8:
                name_objects = selist(f"SELECT name_item FROM warehouse_c WHERE brak <> -1", user)
                inline_obj = InlineKeyboardMarkup(row_width=1)

                for o in name_objects:
                    inline_obj_b = InlineKeyboardButton(text=o["name_item"], callback_data=f'brk_{o["name_item"]}')
                    inline_obj.add(inline_obj_b)

                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é:', reply_markup=inline_obj)
            elif 'brk_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    res = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'] + '_' + message.text
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ *–û–î–ù–û –§–û–¢–û* —ç—Ç–æ–≥–æ –±—Ä–∞–∫–∞:', parse_mode='Markdown')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º:')

            # –£–µ—Ö–∞–ª–æ –°–∫–ª–∞–¥ –ú–µ–±–µ–ª—å
            elif message.text == markups.menu_count_retail_b3:
                name_objects = selist(f"SELECT name_item FROM warehouse_c WHERE min_count <> -1", user)
                inline_obj = InlineKeyboardMarkup(row_width=1)

                for o in name_objects:
                    inline_obj_b = InlineKeyboardButton(text=o["name_item"], callback_data=f'uemeb_{o["name_item"]}')
                    inline_obj.add(inline_obj_b)

                await message.answer(text='–ß—Ç–æ —É–µ—Ö–∞–ª–æ?', reply_markup=inline_obj)
                await message.answer(text='–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞', reply_markup=markups.back_count)
            elif 'uemeb_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    object_name = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1]
                    object_count = message.text
                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)

                    name_objects = selist(f"SELECT * FROM warehouse_c", user)
                    count_obj = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '{object_name}'", user)['count_item']

                    res_ost = '–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n'

                    for o in name_objects:
                        if o["name_item"] == object_name:
                            update(f"UPDATE warehouse_c SET count_item = '{int(count_obj) - int(object_count)}' WHERE name_item = '{object_name}'", user)
                            res_ost += f'<b>{object_name}</b>: {int(count_obj) - int(object_count)}\n'

                    if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                        await message.answer(text='–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É –≤ –¶–µ—Ö—É –∏–∑–º–µ–Ω–µ–Ω—ã!',
                                             reply_markup=markups.menu_count_retail_n)
                    elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                        await message.answer(text='–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥—É –≤ –¶–µ—Ö—É –∏–∑–º–µ–Ω–µ–Ω—ã!',
                                             reply_markup=markups.menu_count_retail_b)

                    await message.answer(text=res_ost)

                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º!')

            # –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
            elif message.text == markups.menu_count_retail_b5:
                datework = str(datetime.datetime.now())[:10]
                if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                    await message.answer(text='–°–º–µ–Ω–∞ –±—ã–ª–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!', reply_markup=markups.menu_count_retail_n)
                else:
                    if len(selist(f"SELECT * FROM wood WHERE status_ship = '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –∂–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏'", user)) == 0:
                        if selone(f"SELECT date_work FROM work_wood WHERE date_work = '{datework}'", user) is None:

                            today = datetime.datetime.today()
                            if today.weekday() == 0 or today.weekday() == 1 or today.weekday() == 2 or today.weekday() == 3 or today.weekday() == 4 or today.weekday() == 5 or today.weekday() == 6 or today.weekday() == 7:
                                name_objects = selist(f"SELECT * FROM warehouse_c WHERE min_count <> -1", user)

                                res = 'monday_'

                                with open('user', 'w', encoding='utf-8') as outfile:
                                    json.dump(name_objects, outfile, ensure_ascii=False)

                                update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)

                                await message.answer(text=f'–°–∫–æ–ª—å–∫–æ {name_objects[0]["ed_2"]} –Ω–∞ —Å–∫–ª–∞–¥–µ –ø–æ–∑–∏—Ü–∏–∏ <b>¬´{name_objects[0]["name_item"]}¬ª</b>?\n–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{name_objects[0]["count_item"]}</b>', reply_markup=markups.back_count)
                            else:
                                create(f"INSERT INTO `data`.`work_wood` (`date_work`) VALUES ('{datework}')", user)
                                admins = selist(f"SELECT id_user FROM users WHERE count_retail = 1", user)
                                for adm in admins:
                                    id_adm = adm['id_user']
                                    update(f"UPDATE users SET count_retail = 2 WHERE id_user = '{id_adm}'", user)

                                if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                                    await message.answer(text='–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!',
                                                                  reply_markup=markups.menu_count_retail_n)
                                elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                                    await message.answer(text='–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!',
                                                                  reply_markup=markups.menu_count_retail_b)
                        else:
                            await message.answer(text='–°–º–µ–Ω–∞ –±—ã–ª–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!', reply_markup=markups.menu_count_retail_n)
                    else:
                        await message.answer(text='–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–º–µ–Ω—ã, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤ –º–∞—à–∏–Ω—É –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏!')
            elif 'monday_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    with open('user', 'r', encoding='utf-8') as outfile:
                        name_objects = json.load(outfile)

                    object_name = name_objects[0]["name_item"]
                    update(f"UPDATE warehouse_c SET count_item = '{message.text}' WHERE name_item = '{object_name}'", user)

                    del name_objects[0]
                    await message.answer(f'–ó–∞–ø–∏—Å–∞–Ω–æ')

                    if len(name_objects) != 0:
                        with open('user', 'w', encoding='utf-8') as outfile:
                            json.dump(name_objects, outfile, ensure_ascii=False)
                        res = 'monday_'
                        update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text=f'–°–∫–æ–ª—å–∫–æ {name_objects[0]["ed_2"]} –Ω–∞ —Å–∫–ª–∞–¥–µ –ø–æ–∑–∏—Ü–∏–∏ <b>¬´{name_objects[0]["name_item"]}¬ª</b>?\n–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{name_objects[0]["count_item"]}</b>')
                    else:
                        datework = str(datetime.datetime.now())[:10]
                        create(f"INSERT INTO `data`.`work_wood` (`date_work`) VALUES ('{datework}')", user)
                        admins = selist(f"SELECT id_user FROM users WHERE count_retail = 1", user)
                        update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                        for adm in admins:
                            id_adm = adm['id_user']
                            update(f"UPDATE users SET count_retail = 2 WHERE id_user = '{id_adm}'", user)

                        if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                            await message.answer(text='–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!',
                                                 reply_markup=markups.menu_count_retail_n)
                        elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                            await message.answer(text='–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!',
                                                 reply_markup=markups.menu_count_retail_b)
                else:
                    await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º!')

            # –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
            elif message.text == markups.menu_count_retail_b4:
                delta_1 = datetime.timedelta(hours=5)
                delta_2 = datetime.timedelta(days=1)
                now = datetime.datetime.now() + delta_1
                yester = datetime.datetime.now() + delta_1 - delta_2

                if int(now.day) < 10:
                    day_edit = '0' + str(now.day)
                else:
                    day_edit = now.day

                if int(now.month) < 10:
                    month_edit = '0' + str(now.month)
                else:
                    month_edit = now.month

                date_now = str(day_edit) + '.' + str(month_edit) + '.' + str(now.year)

                if int(yester.day) < 10:
                    day_edit_1 = '0' + str(yester.day)
                else:
                    day_edit_1 = yester.day

                if int(yester.month) < 10:
                    month_edit_1 = '0' + str(yester.month)
                else:
                    month_edit_1 = yester.month

                date_yester = str(day_edit_1) + '.' + str(month_edit_1) + '.' + str(yester.year)

                if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:

                    if len(selist(f"SELECT * FROM wood WHERE (date_c = '{date_now}' AND status_ship = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ—Ö—É') OR (date_c = '{date_yester}' AND status_ship = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ—Ö—É')", user)) == 0:

                        update(f"UPDATE users SET act_sk = 'how_' WHERE id_user = '{user}'", user)

                        await message.answer(text=f'–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ (–í–ú–ï–°–¢–ï –° –ú–ê–°–¢–ï–†–û–ú)?',
                                             reply_markup=markups.back_count)
                    else:
                        await message.answer(text=f'–ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É, –Ω—É–∂–Ω–æ *–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*!')
                else:
                    if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                        await message.answer(text='–°–º–µ–Ω–∞ –±—ã–ª–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!',
                                             reply_markup=markups.menu_count_retail_n)
                    elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                        await message.answer(text='–°–º–µ–Ω–∞ –±—ã–ª–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!',
                                             reply_markup=markups.menu_count_retail_b)
            elif 'how_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit() and int(message.text) > 0:
                    res = f'count_{message.text}'
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)

                    worksheet = sh.worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
                    name_worker = worksheet.col_values(2)
                    type_worker = worksheet.col_values(7)

                    name_objects = []

                    for i in range(1, len(name_worker)):
                        if type_worker[i] != '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' and type_worker[i] != '–ù–∞—á–∞–ª—å–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' and type_worker[i] != '–£–≤–æ–ª–µ–Ω' and type_worker[i] != '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞':
                            name_objects.append(name_worker[i])

                    main_list = [name_objects, {}]

                    with open('user', 'w', encoding='utf-8') as outfile:
                        json.dump(main_list, outfile, ensure_ascii=False)

                    inline_workers = InlineKeyboardMarkup(row_width=1)
                    for w in name_objects:
                        inline_workers_b = InlineKeyboardButton(text=w, callback_data=f'work_{w}')
                        inline_workers.add(inline_workers_b)

                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=inline_workers)

                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:')
            elif 'rastysh1_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    with open('user', 'r', encoding='utf-8') as outfile:
                        name_objects = json.load(outfile)

                    name_objects.append(message.text)

                    with open('user', 'w', encoding='utf-8') as outfile:
                        json.dump(name_objects, outfile, ensure_ascii=False)

                    res = 'rastysh2_'
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer('–°–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –†–∞—Å—Ç—É—â–∏—Ö 2?')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏:')
            elif 'rastysh2_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    with open('user', 'r', encoding='utf-8') as outfile:
                        name_objects = json.load(outfile)

                    name_objects.append(message.text)

                    with open('user', 'w', encoding='utf-8') as outfile:
                        json.dump(name_objects, outfile, ensure_ascii=False)

                    res = 'pervozv1_'
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer('–°–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —É–ø–∞–∫–æ–≤–∞–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –†–∞—Å—Ç—É—â–∏–π 1?')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏:')
            elif 'pervozv1_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    with open('user', 'r', encoding='utf-8') as outfile:
                        name_objects = json.load(outfile)

                    name_objects.append(message.text)

                    with open('user', 'w', encoding='utf-8') as outfile:
                        json.dump(name_objects, outfile, ensure_ascii=False)

                    res = 'pervozv2_'
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer('–°–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è —É–ø–∞–∫–æ–≤–∞–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –†–∞—Å—Ç—É—â–∏–π 2?')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏:')
            elif 'pervozv2_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    await message.answer('–ú–∏–Ω—É—Ç–æ—á–∫—É...')
                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                    with open('user', 'r', encoding='utf-8') as outfile:
                        name_objects = json.load(outfile)

                    workers = name_objects[1]

                    rast_1 = name_objects[2]
                    rast_2 = name_objects[3]
                    rast_all = int(rast_1) + int(rast_2)
                    pervozv_1 = name_objects[4]
                    pervozv_2 = message.text
                    pervozv_all = int(pervozv_1) + int(pervozv_2)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–§—É—Ä–Ω–∏—Ç—É—Ä—ã –†–∞—Å—Ç—É—â–∏–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–§—É—Ä–Ω–∏—Ç—É—Ä—ã –†–∞—Å—Ç—É—â–∏–π'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 1'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_1)}' WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 1'",user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 2'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_2)}' WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ —Ä–∞—Å—Ç—É—â–∏–π 2'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å—Ç–æ–ª–µ—à–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (—Å—Ç–æ–ª–µ—à–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å–ø–∏–Ω–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (—Å–ø–∏–Ω–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (–ø–µ—Ä–µ–º—ã—á–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (–ø–µ—Ä–µ–º—ã—á–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å–∏–¥—É—à–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (—Å–∏–¥—É—à–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–§–∞–Ω–µ—Ä–∞ 12–º–º'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(int(rast_all) / 3)}' WHERE name_item = '–§–∞–Ω–µ—Ä–∞ 12–º–º'",user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(pervozv_all)}' WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'",user)

                    count_v = selone(f"SELECT count_item FROM warehouse_refunds WHERE name_item = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1'", user)['count_item']
                    update(f"UPDATE warehouse_refunds SET count_item = '{int(count_v) - int(pervozv_1)}' WHERE name_item = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1'", user)

                    count_v = selone(f"SELECT count_item FROM warehouse_refunds WHERE name_item = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2'", user)['count_item']
                    update(f"UPDATE warehouse_refunds SET count_item = '{int(count_v) - int(pervozv_2)}' WHERE name_item = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2'", user)


                    await message.answer('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—É–≥–ª –ª–∏—Å—Ç–∞ ¬´–û—Ç –±–æ—Ç–∞¬ª')
                    worksheet = sh.worksheet("–û—Ç –±–æ—Ç–∞")
                    count_date = worksheet.col_values(1)

                    delta_1 = datetime.timedelta(hours=5)
                    now = datetime.datetime.now()
                    if int(now.day) < 10:
                        day_edit = '0' + str(now.day)
                    else:
                        day_edit = now.day

                    if int(now.month) < 10:
                        month_edit = '0' + str(now.month)
                    else:
                        month_edit = now.month

                    date_create = f'{day_edit}.{month_edit}.{now.year}'

                    worksheet.update_cell(len(count_date) + 1, 1, date_create)
                    worksheet.update_cell(len(count_date) + 1, 3, rast_1)
                    worksheet.update_cell(len(count_date) + 1, 4, rast_2)
                    worksheet.update_cell(len(count_date) + 1, 7, pervozv_1)
                    worksheet.update_cell(len(count_date) + 1, 8, pervozv_2)

                    count_w = 10
                    for worker in workers:
                        worksheet.update_cell(len(count_date) + 1, count_w, worker)
                        count_w += 1

                    await message.answer('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—É–≥–ª –ª–∏—Å—Ç–∞ ¬´–ì—Ä–∞—Ñ–∏–∫¬ª')

                    if now.month == 1:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –Ø–Ω–≤–∞—Ä—å {now.year}"
                    elif now.month == 2:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –§–µ–≤—Ä–∞–ª—å {now.year}"
                    elif now.month == 3:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞—Ä—Ç {now.year}"
                    elif now.month == 4:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–ø—Ä–µ–ª—å {now.year}"
                    elif now.month == 5:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞–π {now.year}"
                    elif now.month == 6:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–Ω—å {now.year}"
                    elif now.month == 7:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–ª—å {now.year}"
                    elif now.month == 8:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–≤–≥—É—Å—Ç {now.year}"
                    elif now.month == 9:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –°–µ–Ω—Ç—è–±—Ä—å {now.year}"
                    elif now.month == 10:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –û–∫—Ç—è–±—Ä—å {now.year}"
                    elif now.month == 11:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ù–æ—è–±—Ä—å {now.year}"
                    elif now.month == 12:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –î–µ–∫–∞–±—Ä—å {now.year}"

                    worksheet_2 = sh.worksheet(name_list)
                    num_row = int(now.day) + 1

                    worksheet_2.update_cell(num_row, 5, rast_all)
                    worksheet_2.update_cell(num_row, 6, pervozv_all)

                    for w in workers:
                        cell = worksheet_2.find(w)
                        num_col_b = int(cell.col)
                        num_col_n = int(cell.col) + 1
                        worksheet_2.update_cell(num_row, num_col_b, workers[w][0])
                        worksheet_2.update_cell(num_row, num_col_n, workers[w][1])


                    res = f'razgr_{message.text}'
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer('–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ä–∞–∑–≥—Ä—É–∂–∞–ª–∏ –º–∞—à–∏–Ω—É —Å–µ–≥–æ–¥–Ω—è?')

                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏:')
            elif 'razgr_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    delta_1 = datetime.timedelta(hours=5)
                    now = datetime.datetime.now()
                    await message.answer('–ú–∏–Ω—É—Ç–æ—á–∫—É...')

                    await message.answer('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—É–≥–ª –ª–∏—Å—Ç–∞ ¬´–ì—Ä–∞—Ñ–∏–∫¬ª')

                    if now.month == 1:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –Ø–Ω–≤–∞—Ä—å {now.year}"
                    elif now.month == 2:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –§–µ–≤—Ä–∞–ª—å {now.year}"
                    elif now.month == 3:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞—Ä—Ç {now.year}"
                    elif now.month == 4:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–ø—Ä–µ–ª—å {now.year}"
                    elif now.month == 5:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞–π {now.year}"
                    elif now.month == 6:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–Ω—å {now.year}"
                    elif now.month == 7:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–ª—å {now.year}"
                    elif now.month == 8:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–≤–≥—É—Å—Ç {now.year}"
                    elif now.month == 9:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –°–µ–Ω—Ç—è–±—Ä—å {now.year}"
                    elif now.month == 10:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –û–∫—Ç—è–±—Ä—å {now.year}"
                    elif now.month == 11:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ù–æ—è–±—Ä—å {now.year}"
                    elif now.month == 12:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –î–µ–∫–∞–±—Ä—å {now.year}"

                    worksheet_2 = sh.worksheet(name_list)
                    num_row = int(now.day) + 1

                    worksheet_2.update_cell(num_row, 4, message.text)



                    with open('user', 'r', encoding='utf-8') as outfile:
                        name_objects = json.load(outfile)

                    workers = name_objects[1]
                    rast_1 = name_objects[2]
                    rast_2 = name_objects[3]
                    rast_all = int(rast_1) + int(rast_2)
                    pervozv_1 = name_objects[4]
                    pervozv_2 = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1]
                    pervozv_all = int(pervozv_1) + int(pervozv_2)
                    razgr = message.text
                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                    mes = '‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n\n–†–∞–±–æ—Ç–∞–ª–∏: '

                    count_w = 4
                    for worker in workers:
                        mes += f'*{worker} *'
                        count_w += 1

                    acp = f'A{num_row}'
                    acd = f'B{num_row}'

                    plan = worksheet_2.acell(acp).value
                    dop = float(worksheet_2.acell(acd).value[2:].replace(',', '.'))
                    chs = float(worksheet_2.acell('C34').value[2:].replace(',', '.'))
                    chm = float(worksheet_2.acell('C35').value[2:].replace(',', '.'))
                    zav = float(worksheet_2.acell('C36').value[2:].replace(',', '.'))
                    nght = float(worksheet_2.acell('C37').value[2:].replace(',', '.'))
                    razs = float(worksheet_2.acell('C38').value[2:].replace(',', '.'))

                    worksheet_3 = sh.worksheet("–û—Ç –±–æ—Ç–∞")
                    count_date = worksheet_3.col_values(1)

                    worksheet_3.update_cell(len(count_date), 9, message.text)
                    worksheet_3.update_cell(len(count_date), 2, plan)

                    mes += f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' \
                           f'\nüê• –°–¥–µ–ª–∞–Ω–æ —Ä–∞—Å—Ç—É—â–∏—Ö: *{rast_all}*' \
                           f'\n\n–ü–ª–∞–Ω: *{plan}*' \
                           f'\n–°—É–º–º–∞ –∑–∞ –æ–¥–Ω–æ –¥–æ–ø. –∏–∑–¥–µ–ª–∏–µ: *{dop} —Ä—É–±.*' \
                           f'\n–°—É–º–º–∞ –∑–∞ –¥–æ–ø. –∏–∑–¥–µ–ª–∏—è: *{(int(rast_all) - int(plan)) * dop} —Ä—É–±.*' \
                           f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' \
                           f'\nüì¶ –£–ø–∞–∫–æ–≤–∞–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: *{pervozv_all}*' \
                           f'\n\n–°—É–º–º–∞ –∑–∞ –æ–¥–∏–Ω –≤–æ–∑–≤—Ä–∞—Ç: *{zav} —Ä—É–±.*' \
                           f'\n–°—É–º–º–∞ –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç—ã: *{int(pervozv_all) * zav} —Ä—É–±.*' \
                           f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' \
                           f'\nüöö –†–∞–∑–≥—Ä—É–∑–æ–∫: *{razgr}*' \
                           f'\n\n–°—É–º–º–∞ –∑–∞ –æ–¥–Ω—É —Ä–∞–∑–≥—Ä—É–∑–∫—É: *{razs} —Ä—É–±.*' \
                           f'\n–°—É–º–º–∞ –∑–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{int(razgr) * razs} —Ä—É–±.*'

                    await bot.send_message(chat_id=-1002146643966, text=mes, message_thread_id=2111, parse_mode='Markdown')


                    admins = selist(f"SELECT id_user FROM users WHERE count_retail = 2", user)
                    for adm in admins:
                        id_adm = adm['id_user']
                        update(f"UPDATE users SET count_retail = 1 WHERE id_user = '{id_adm}'", user)

                    if selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 2:
                        await message.answer(text='–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞!',
                                                      reply_markup=markups.menu_count_retail_n)
                    elif selone(f"SELECT count_retail FROM users WHERE id_user = '{user}'", user)['count_retail'] == 1:
                        await message.answer(text='–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞!',
                                                      reply_markup=markups.menu_count_retail_b)

                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏:')

            # –ù–æ—á–Ω–∞—è —Å–º–µ–Ω–∞
            elif message.text == markups.menu_count_retail_b9:
                update(f"UPDATE users SET act_sk = 'hows_' WHERE id_user = '{user}'", user)

                await message.answer(text=f'–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞ –Ω–æ—á—å—é?', reply_markup=markups.back_count)
            elif 'hows_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit() and int(message.text) > 0:
                    await message.answer(text='–ú–∏–Ω—É—Ç–æ—á–∫—É...')
                    res = f'counts_{message.text}'
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)

                    worksheet = sh.worksheet("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
                    name_worker = worksheet.col_values(2)
                    type_worker = worksheet.col_values(7)

                    name_objects = []

                    for i in range(1, len(name_worker)):
                        if type_worker[i] != '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' and type_worker[i] != '–ù–∞—á–∞–ª—å–Ω–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' and type_worker[i] != '–£–≤–æ–ª–µ–Ω' and type_worker[i] != '–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞':
                            name_objects.append(name_worker[i])

                    main_list = [name_objects, {}]

                    with open('user', 'w', encoding='utf-8') as outfile:
                        json.dump(main_list, outfile, ensure_ascii=False)

                    inline_workers = InlineKeyboardMarkup(row_width=1)
                    for w in name_objects:
                        inline_workers_b = InlineKeyboardButton(text=w, callback_data=f'works_{w}')
                        inline_workers.add(inline_workers_b)

                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=inline_workers)

                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:')
            elif 'rastyshs1_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    res = 'rastyshs2_' + message.text
                    update(f"UPDATE users SET act_sk = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer('–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –†–∞—Å—Ç—É—â–∏—Ö 2?')
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏:')
            elif 'rastyshs2_' in selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk']:
                if message.text.isdigit():
                    await message.answer('–ú–∏–Ω—É—Ç–æ—á–∫—É...')
                    with open('user', 'r', encoding='utf-8') as outfile:
                        name_objects = json.load(outfile)

                    workers = name_objects[1]
                    rast_1 = selone(f"SELECT act_sk FROM users WHERE id_user = '{user}'", user)['act_sk'].split('_')[1]
                    rast_2 = message.text
                    rast_all = int(rast_1) + int(rast_2)
                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)
                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–ö–æ—Ä–æ–±–∫–∞ –†–∞—Å—Ç—É—â–∏–π'",user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ 1'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_1)}' WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ 1'",user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ 2'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_2)}' WHERE name_item = '–†–∞–∑–¥–∞—Ç–∫–∞ 2'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–§—É—Ä–Ω–∏—Ç—É—Ä—ã –†–∞—Å—Ç—É—â–∏–π'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–§—É—Ä–Ω–∏—Ç—É—Ä—ã –†–∞—Å—Ç—É—â–∏–π'",user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å—Ç–æ–ª–µ—à–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (—Å—Ç–æ–ª–µ—à–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å–ø–∏–Ω–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (—Å–ø–∏–Ω–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (–ø–µ—Ä–µ–º—ã—á–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (–ø–µ—Ä–µ–º—ã—á–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–õ–î–°–ü (—Å–∏–¥—É—à–∫–∞)'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(rast_all)}' WHERE name_item = '–õ–î–°–ü (—Å–∏–¥—É—à–∫–∞)'", user)

                    count_i = selone(f"SELECT count_item FROM warehouse_c WHERE name_item = '–§–∞–Ω–µ—Ä–∞ 15–º–º'", user)['count_item']
                    update(f"UPDATE warehouse_c SET count_item = '{int(count_i) - int(int(rast_all) / 3)}' WHERE name_item = '–§–∞–Ω–µ—Ä–∞ 15–º–º'",user)

                    await message.answer('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—É–≥–ª –ª–∏—Å—Ç–∞ ¬´–û—Ç –±–æ—Ç–∞¬ª')
                    worksheet_4 = sh.worksheet("–û—Ç –±–æ—Ç–∞")
                    count_date = worksheet_4.col_values(1)

                    delta_1 = datetime.timedelta(days=1)
                    now = datetime.datetime.now() - delta_1
                    if int(now.day) < 10:
                        day_edit = '0' + str(now.day)
                    else:
                        day_edit = now.day

                    if int(now.month) < 10:
                        month_edit = '0' + str(now.month)
                    else:
                        month_edit = now.month

                    date_create = f'{day_edit}.{month_edit}.{now.year}'
                    cell = worksheet_4.find(date_create)
                    num_col_n = int(cell.row)
                    worksheet_4.update_cell(num_col_n, 5, rast_1)
                    worksheet_4.update_cell(num_col_n, 6, rast_2)

                    await message.answer('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥—É–≥–ª –ª–∏—Å—Ç–∞ ¬´–ì—Ä–∞—Ñ–∏–∫¬ª')

                    if now.month == 1:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –Ø–Ω–≤–∞—Ä—å {now.year}"
                    elif now.month == 2:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –§–µ–≤—Ä–∞–ª—å {now.year}"
                    elif now.month == 3:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞—Ä—Ç {now.year}"
                    elif now.month == 4:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–ø—Ä–µ–ª—å {now.year}"
                    elif now.month == 5:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ú–∞–π {now.year}"
                    elif now.month == 6:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–Ω—å {now.year}"
                    elif now.month == 7:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ò—é–ª—å {now.year}"
                    elif now.month == 8:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ê–≤–≥—É—Å—Ç {now.year}"
                    elif now.month == 9:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –°–µ–Ω—Ç—è–±—Ä—å {now.year}"
                    elif now.month == 10:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –û–∫—Ç—è–±—Ä—å {now.year}"
                    elif now.month == 11:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –ù–æ—è–±—Ä—å {now.year}"
                    elif now.month == 12:
                        name_list = f"–ì—Ä–∞—Ñ–∏–∫ –î–µ–∫–∞–±—Ä—å {now.year}"

                    worksheet_2 = sh.worksheet(name_list)
                    num_row = int(now.day) + 1

                    edrast = round(int(rast_all) / len(workers), 2)

                    for w in workers:
                        cell = worksheet_2.find(w)
                        num_col_n = int(cell.col) + 2
                        worksheet_2.update_cell(num_row, num_col_n, edrast)

                    update(f"UPDATE users SET act_sk = ' ' WHERE id_user = '{user}'", user)

                    mes = 'üåô –ë—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞.\n\n–†–∞–±–æ—Ç–∞–ª–∏: '

                    count_w = 4
                    for worker in workers:
                        mes += f'*{worker} *'
                        count_w += 1

                    nght = float(worksheet_2.acell('C37').value[2:].replace(',', '.'))

                    mes += f'\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' \
                           f'\nüê• –°–¥–µ–ª–∞–Ω–æ —Ä–∞—Å—Ç—É—â–∏—Ö: *{rast_all}*' \
                           f'\n\n–°—É–º–º–∞ –∑–∞ –æ–¥–Ω–æ –∏–∑–¥–µ–ª–∏–µ: *{nght} —Ä—É–±.*' \
                           f'\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –∏–∑–¥–µ–ª–∏—è: *{int(rast_all) * nght} —Ä—É–±.*' \


                    await bot.send_message(chat_id=-1002146643966, text=mes, message_thread_id=2111, parse_mode='Markdown')

                    await message.answer('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ!\n\n_–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞_', parse_mode='Markdown')

                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏:')

            # –ú–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∏–∫–∞
            elif message.text == markups.menu_admin_b4:
                if selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)['company'] == '–ë–æ—Å—Å':
                    await message.answer(text=texts.menu_logistic, reply_markup=markups.menu_logistic)

                else:
                    await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

            # –û—Ç–º–µ–Ω–∞ –°–∫–ª–∞–¥ –§–§
            elif message.text == markups.menu_back_logistic:
                defaul_values(user)
                await message.answer(text=texts.menu_logistic, reply_markup=markups.menu_logistic)

            # –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
            elif message.text == markups.menu_logistic_b1:
                update(f"UPDATE users SET act_log = 'type_' WHERE id_user = '{user}'", user)
                inline_type_b = ReplyKeyboardMarkup(resize_keyboard=True)
                inline_type_b1 = '–ó–∞–±–æ—Ä'
                inline_type_b2 = 'FBS'
                inline_type_b3 = 'FBO'
                inline_type_b4 = '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏'
                inline_type_b5 = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è'
                inline_type_b6 = '–î–æ—Å—Ç–∞–≤–∫–∞'
                inline_type_b7 = '–í–æ–∑–≤—Ä–∞—Ç—ã'
                menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                inline_type_b.add(inline_type_b1, inline_type_b2, inline_type_b3).add(inline_type_b6).add(inline_type_b7).add(inline_type_b4, inline_type_b5).add(menu_back_logistic)
                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ', reply_markup=inline_type_b)
            elif 'type_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                res = 'date_' + message.text
                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                inline_date = ReplyKeyboardMarkup(resize_keyboard=True)
                inline_date_b1 = f'{sk.date_create()}'
                inline_date_b2 = f'{sk.date_tomorrow_create()}'
                menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                inline_date.add(inline_date_b1, inline_date_b2).add(menu_back_logistic)
                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É <i>(–≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.11.2023)</i>', reply_markup=inline_date)
            elif 'date_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                if len(message.text.split('.')) == 3 and len(message.text) == 10:
                    delta_1 = datetime.timedelta(hours=5)
                    now = datetime.datetime.now() + delta_1

                    if ((int(message.text[0:2]) < int(now.day)) and (int(message.text[3:5]) == int(now.month))) or (int(message.text[3:5]) < int(now.month)):
                        await message.answer(text='–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:', reply_markup=markups.back_logistic)

                    elif (int(message.text[0:2]) == int(now.day)) and (int(sk.time_create()[0:2]) > 18):
                        await message.answer(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:', reply_markup=markups.back_logistic)

                    elif selone(f"SELECT date_work FROM work_ship WHERE date_work = '{message.text}'", user) is not None:
                        th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                        sec_res = th_res + '_' + str(message.text)
                        first_res = sec_res.split('_')
                        del first_res[0]


                        newlist = selist(f"SELECT * FROM shipping WHERE date_ship = '{message.text}' AND (status_ship = '–í –æ—á–µ—Ä–µ–¥–∏' OR status_ship = '–ü—Ä–∏–Ω—è—Ç' OR status_ship = '–ï–¥–µ—Ç –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é')", user)
                        if len(newlist) > 0:
                            await message.answer(text='<b>–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:</b>',
                                                 reply_markup=markups.back_logistic)
                            list_log = sorted(newlist, key=lambda d: d['num_ship'])
                            for l in list_log:
                                await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                          f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                          f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                          f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                          f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                          f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                          f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                                          f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                                          f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n', parse_mode='Markdown')
                            res = 'dateyes_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            update(f"UPDATE users SET comment_pack_fbs = '{message.text}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É')
                            await message.answer(text='–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –Ω–∞—á–∞–ª–æ, –≤–≤–µ–¥–∏—Ç–µ 0')
                        else:
                            newlist = selist(f"SELECT num_ship FROM shipping WHERE date_ship = '{message.text}'", user)
                            list_log = sorted(newlist, key=lambda d: d['num_ship'])
                            num_ship = int(list_log[-1]['num_ship']) + 1
                            th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                            sec_res = th_res + '_' + str(message.text) + '_'+ str(num_ship)
                            first_res = sec_res.split('_')
                            del first_res[0]

                            if first_res[0] == '–ó–∞–±–æ—Ä':
                                res = 'count_' + '_'.join(first_res) + '_–ö–æ—Ä–æ–±'
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:',
                                                     reply_markup=markups.back_logistic)
                            elif first_res[0] == 'FBS':
                                inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                                inline_item_b1 = '–ú–µ–±–µ–ª—å'
                                inline_item_b2 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã'
                                menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                                inline_item.add(inline_item_b1).add(inline_item_b2).add(menu_back_logistic)

                                res = 'item_' + '_'.join(first_res)
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:',
                                    reply_markup=inline_item)
                            elif first_res[0] == '–í–æ–∑–≤—Ä–∞—Ç—ã':
                                inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                                inline_item_b1 = '–ú–µ–±–µ–ª—å'
                                menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                                inline_item.add(inline_item_b1).add(menu_back_logistic)

                                res = 'item_' + '_'.join(first_res)
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:',
                                    reply_markup=inline_item)
                            elif first_res[0] == '–î–æ—Å—Ç–∞–≤–∫–∞':
                                inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                                inline_item_b1 = '–ú–µ–±–µ–ª—å'
                                menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                                inline_item.add(inline_item_b1).add(menu_back_logistic)

                                res = 'item_' + '_'.join(first_res)
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:',
                                    reply_markup=inline_item)
                            elif first_res[0] == 'FBO':
                                res = 'count_' + '_'.join(first_res) + '_–ö–æ—Ä–æ–±'
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:',
                                                     reply_markup=markups.back_logistic)
                            elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                                res = 'item_' + '_'.join(first_res)
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:',
                                                     reply_markup=markups.back_logistic)
                            elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                                inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                                inline_item_b1 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1'
                                inline_item_b2 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2'
                                inline_item_b3 = '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å 15 –∫–≥'
                                inline_item_b4 = '–ü–∞—Ä—è—â–∏–µ –ø–æ–ª–∫–∏'
                                menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                                inline_item.add(inline_item_b1, inline_item_b2).add(inline_item_b3, inline_item_b4).add(menu_back_logistic)

                                res = 'item_' + '_'.join(first_res)
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:',
                                    reply_markup=inline_item)
                            else:
                                res = 'item_' + '_'.join(first_res)
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:',
                                                     reply_markup=markups.back_logistic)

                    else:
                        th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                        sec_res = th_res + '_' + str(message.text)
                        first_res = sec_res.split('_')
                        del first_res[0]

                        if first_res[0] == '–ó–∞–±–æ—Ä':
                            res = 'count_' + '_'.join(first_res) + '_0' + '_–ö–æ—Ä–æ–±'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:', reply_markup=markups.back_logistic)
                        elif first_res[0] == 'FBS':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            inline_item_b2 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(inline_item_b2).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res) + '_0'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        elif first_res[0] == '–î–æ—Å—Ç–∞–≤–∫–∞':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res) + '_0'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        elif first_res[0] == 'FBO':
                            res = 'count_' + '_'.join(first_res) + '_0' + '_–ö–æ—Ä–æ–±'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:', reply_markup=markups.back_logistic)
                        elif first_res[0] == '–í–æ–∑–≤—Ä–∞—Ç—ã':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res) + '_0'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:',
                                reply_markup=inline_item)
                        elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                            res = 'item_' + '_'.join(first_res) + '_0'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=markups.back_logistic)
                        elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1'
                            inline_item_b2 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2'
                            inline_item_b3 = '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å 15 –∫–≥'
                            inline_item_b4 = '–ü–∞—Ä—è—â–∏–µ –ø–æ–ª–∫–∏'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1, inline_item_b2).add(inline_item_b3, inline_item_b4).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res) + '_0'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)

                        else:
                            res = 'item_' + '_'.join(first_res) + '_0'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=markups.back_logistic)
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.11.2023:', reply_markup=markups.back_logistic)
            elif 'dateyes_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                if message.text.isdigit():
                    if int(message.text) == 0:
                        date_create = selone(f"SELECT comment_pack_fbs FROM users WHERE id_user = '{user}'", user)['comment_pack_fbs']
                        newlist = selist(f"SELECT * FROM shipping WHERE date_ship = '{date_create}'", user)
                        list_log = sorted(newlist, key=lambda d: d['num_ship'])
                        for l in list_log:
                            if l['num_ship'] != 0:
                                num_ship = l['num_ship'] / 2
                                break

                        th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                        sec_res = th_res + '_' + str(num_ship)
                        first_res = sec_res.split('_')
                        del first_res[0]

                        if first_res[0] == '–ó–∞–±–æ—Ä':
                            res = 'count_' + '_'.join(first_res) + '_–ö–æ—Ä–æ–±'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:', reply_markup=markups.back_logistic)
                        elif first_res[0] == 'FBS':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            inline_item_b2 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(inline_item_b2).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        elif first_res[0] == '–í–æ–∑–≤—Ä–∞—Ç—ã':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        elif first_res[0] == '–î–æ—Å—Ç–∞–≤–∫–∞':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        elif first_res[0] == 'FBO':
                            res = 'count_' + '_'.join(first_res) + '_–ö–æ—Ä–æ–±'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:', reply_markup=markups.back_logistic)
                        elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=markups.back_logistic)
                        elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1'
                            inline_item_b2 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2'
                            inline_item_b3 = '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å 15 –∫–≥'
                            inline_item_b4 = '–ü–∞—Ä—è—â–∏–µ –ø–æ–ª–∫–∏'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1, inline_item_b2).add(inline_item_b3, inline_item_b4).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        else:
                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=markups.back_logistic)


                    elif selone(f"SELECT num_ship FROM shipping WHERE id_ship = '{int(message.text)}'", user) is not None:
                        date_create = selone(f"SELECT date_ship FROM shipping WHERE id_ship = '{int(message.text)}'", user)['date_ship']
                        newlist = selist(f"SELECT * FROM shipping WHERE date_ship = '{date_create}'", user)
                        num_start = selone(f"SELECT num_ship FROM shipping WHERE id_ship = '{int(message.text)}'", user)['num_ship']
                        list_log = sorted(newlist, key=lambda d: d['num_ship'])
                        for i in range(len(list_log)):
                            if i == len(list_log) - 1:
                                num_ship = list_log[i]['num_ship'] + 1
                            elif list_log[i]['num_ship'] == num_start:
                                num_ship = list_log[i]['num_ship'] + ((list_log[i + 1]['num_ship'] - list_log[i]['num_ship']) / 2)
                                break

                        th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                        sec_res = th_res + '_' + str(num_ship)
                        first_res = sec_res.split('_')
                        del first_res[0]

                        if first_res[0] == '–ó–∞–±–æ—Ä':
                            res = 'count_' + '_'.join(first_res) + '_–ö–æ—Ä–æ–±'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:', reply_markup=markups.back_logistic)
                        elif first_res[0] == 'FBS':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            inline_item_b2 = '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(inline_item_b2).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        elif first_res[0] == '–í–æ–∑–≤—Ä–∞—Ç—ã':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:',
                                                 reply_markup=inline_item)
                        elif first_res[0] == '–î–æ—Å—Ç–∞–≤–∫–∞':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–ú–µ–±–µ–ª—å'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        elif first_res[0] == 'FBO':
                            res = 'count_' + '_'.join(first_res) + '_–ö–æ—Ä–æ–±'
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–≤:', reply_markup=markups.back_logistic)
                        elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=markups.back_logistic)
                        elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                            inline_item = ReplyKeyboardMarkup(resize_keyboard=True)
                            inline_item_b1 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1'
                            inline_item_b2 = '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2'
                            inline_item_b3 = '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å 15 –∫–≥'
                            inline_item_b4 = '–ü–∞—Ä—è—â–∏–µ –ø–æ–ª–∫–∏'
                            menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                            inline_item.add(inline_item_b1, inline_item_b2).add(inline_item_b3, inline_item_b4).add(menu_back_logistic)

                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_item)
                        else:
                            res = 'item_' + '_'.join(first_res)
                            update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=markups.back_logistic)
                    else:
                        await message.answer(text='–ó–∞—è–≤–∫–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:', reply_markup=markups.back_logistic)
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ ID —á–∏—Å–ª–æ–º:', reply_markup=markups.back_logistic)
            elif 'item_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                sec_res = th_res + '_' + str(message.text)
                first_res = sec_res.split('_')
                del first_res[0]
                if message.text == '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã':
                    res = 'adressb_' + '_'.join(first_res) + '_–ù–µ —É–∫–∞–∑–∞–Ω–æ' + '_–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(menu_back_logistic)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                else:
                    res = 'count_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', reply_markup=markups.back_logistic)
            elif 'count_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                if message.text.isdigit():
                    th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                    sec_res = th_res + '_' + str(message.text)
                    first_res = sec_res.split('_')
                    del first_res[0]
                    res = 'we_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –æ–±—â–∏–π –≤–µ—Å <i>(–Ω–∞–ø—Ä–∏–º–µ—Ä 20–∫–≥. –∏–ª–∏ 1—Ç.)</i>:', reply_markup=markups.back_logistic)
                else:
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º:', reply_markup=markups.back_logistic)
            elif 'we_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                sec_res = th_res + '_' + str(message.text)
                first_res = sec_res.split('_')
                del first_res[0]
                if first_res[0] == '–ó–∞–±–æ—Ä':
                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞:', reply_markup=markups.back_logistic)
                elif first_res[0] == 'FBS':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(menu_back_logistic)

                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == '–í–æ–∑–≤—Ä–∞—Ç—ã':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–≥–æ 7 (Wildberries)'
                    inline_ad_b2 = '–ì–∞—Ñ—É—Ä–∏ 101 (–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç)'
                    inline_ad_b3 = '–ö–∞—Ä—å–µ—Ä–Ω–∞—è 7 —Å—Ç7 (OZON)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(inline_ad_b3).add(menu_back_logistic)

                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == '–î–æ—Å—Ç–∞–≤–∫–∞':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(menu_back_logistic)

                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == 'FBO':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(menu_back_logistic)

                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–†–æ—Å—Å–∏–π—Å–∫–∞—è 60–ë (–£—Ñ–∞–°–∫–ª–∞–¥)'
                    inline_ad_b2 = '–°–∏–ª–∏–∫–∞—Ç–Ω–∞—è —É–ª., 3/1 (–ì–æ—Ñ—Ä–∏–∫–∞)'
                    inline_ad_b3 = '–ù–æ–≤–æ–∂—ë–Ω–æ–≤–∞, 88–í (–°—Ç—Ä–æ–π–ø–∞–∫)'
                    inline_ad_b4 = '–ë–∞–∑–∏—Å–Ω—ã–π –ø—Ä., 2 (–ë–æ—è—Ä–¥)'
                    inline_ad_b5 = '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–∞—è, 4–ë (–§—Ä–µ–∑—ã 102)'
                    inline_ad_b6 = '–ë–ª–∞–≥–æ–≤–∞—Ä—Å–∫–∞—è, 4 –∫.1'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(inline_ad_b3).add(inline_ad_b4).add(inline_ad_b5).add(inline_ad_b6).add(menu_back_logistic)

                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    inline_ad_b4 = '–°–∏–ª–∏–∫–∞—Ç–Ω–∞—è 28–ë (–û—Ñ–∏—Å)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(inline_ad_b4).add(menu_back_logistic)

                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                else:
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    inline_ad_b4 = '–°–∏–ª–∏–∫–∞—Ç–Ω–∞—è 28–ë (–û—Ñ–∏—Å)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(inline_ad_b4).add(menu_back_logistic)

                    res = 'adressb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
            elif 'adressb_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                sec_res = th_res + '_' + str(message.text)
                first_res = sec_res.split('_')
                del first_res[0]

                if first_res[0] == '–ó–∞–±–æ—Ä':
                    res = 'phoneb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:', reply_markup=markups.back_logistic)
                elif first_res[0] == 'FBS':
                    if message.text == '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b2 = '8-996-102-04-54 –ê–Ω—É–∞—Ä'
                        inline_phone_b4 = '8-995-948-29-00 –†–∞—Ö–º–∞–Ω'
                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b2).add(inline_phone_b4).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    elif message.text == '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b1 = '8-986-702-18-15 –ù—É—Ä–∏—Å–ª–∞–º'
                        inline_phone_b2 = '8-987-351-37-49 –†–∞–º–∏–ª—å'

                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b1).add(inline_phone_b2).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    else:
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è:', reply_markup=markups.back_logistic)
                elif first_res[0] == '–î–æ—Å—Ç–∞–≤–∫–∞':
                    if message.text == '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b2 = '8-996-102-04-54 –ê–Ω—É–∞—Ä'
                        inline_phone_b4 = '8-995-948-29-00 –†–∞—Ö–º–∞–Ω'
                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b2).add(inline_phone_b4).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    elif message.text == '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b1 = '8-986-702-18-15 –ù—É—Ä–∏—Å–ª–∞–º'
                        inline_phone_b2 = '8-987-351-37-49 –†–∞–º–∏–ª—å'

                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b1).add(inline_phone_b2).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    else:
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è:', reply_markup=markups.back_logistic)
                elif first_res[0] == 'FBO':
                    if message.text == '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b2 = '8-996-102-04-54 –ê–Ω—É–∞—Ä'
                        inline_phone_b4 = '8-995-948-29-00 –†–∞—Ö–º–∞–Ω'
                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b2).add(inline_phone_b4).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    elif message.text == '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b1 = '8-986-702-18-15 –ù—É—Ä–∏—Å–ª–∞–º'
                        inline_phone_b2 = '8-987-351-37-49 –†–∞–º–∏–ª—å'

                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b1).add(inline_phone_b2).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    else:
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è:', reply_markup=markups.back_logistic)
                elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                    res = 'phoneb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è:', reply_markup=markups.back_logistic)
                elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                    if message.text == '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b2 = '8-996-102-04-54 –ê–Ω—É–∞—Ä'
                        inline_phone_b4 = '8-995-948-29-00 –†–∞—Ö–º–∞–Ω'
                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b2).add(inline_phone_b4).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    elif message.text == '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b1 = '8-986-702-18-15 –ù—É—Ä–∏—Å–ª–∞–º'
                        inline_phone_b2 = '8-987-351-37-49 –†–∞–º–∏–ª—å'

                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b1).add(inline_phone_b2).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)

                    elif message.text == '–°–∏–ª–∏–∫–∞—Ç–Ω–∞—è 28–ë (–û—Ñ–∏—Å)':
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b1 = '8-987-256-07-06 –†–æ–º–∞–Ω'
                        inline_phone_b2 = '8-917-782-17-21 –ê–π–Ω—É—Ä'

                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b1).add(inline_phone_b2).add(menu_back_logistic)
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    else:
                        res = 'phoneb_' + '_'.join(first_res)
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è:', reply_markup=markups.back_logistic)
                else:
                    res = 'phoneb_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è:', reply_markup=markups.back_logistic)
            elif 'phoneb_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                sec_res = th_res + '_' + str(message.text)
                first_res = sec_res.split('_')
                del first_res[0]

                if first_res[0] == '–ó–∞–±–æ—Ä':
                    inline_tm = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_tm_b1 = '—Å 13:00 –¥–æ 17:00'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_tm.add(inline_tm_b1).add(menu_back_logistic)

                    res = 'timeship_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_tm)
                elif first_res[0] == 'FBS':
                    inline_tm = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_tm_b1 = '—Å 10:00 –¥–æ 13:00'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_tm.add(inline_tm_b1).add(menu_back_logistic)

                    res = 'timeship_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_tm)
                elif first_res[0] == 'FBO':
                    inline_tm = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_tm_b1 = '–¥–æ 20:00'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_tm.add(inline_tm_b1).add(menu_back_logistic)

                    res = 'timeship_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_tm)
                elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                    inline_tm = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_tm_b1 = '–¥–æ 13:00'
                    inline_tm_b2 = '–¥–æ 14:00'
                    inline_tm_b3 = '–¥–æ 15:00'
                    inline_tm_b4 = '–¥–æ 16:00'
                    inline_tm_b5 = '–¥–æ 17:00'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_tm.add(inline_tm_b1, inline_tm_b2).add(inline_tm_b3, inline_tm_b4).add(inline_tm_b5).add(menu_back_logistic)

                    res = 'timeship_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_tm)
                elif first_res[0] == '–î–æ—Å—Ç–∞–≤–∫–∞':
                    inline_tm = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_tm_b2 = '–¥–æ 14:00'
                    inline_tm_b3 = '–¥–æ 15:00'
                    inline_tm_b4 = '–¥–æ 16:00'
                    inline_tm_b5 = '–¥–æ 17:00'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_tm.add(inline_tm_b2, inline_tm_b3).add(inline_tm_b4, inline_tm_b5).add(menu_back_logistic)

                    res = 'timeship_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_tm)
                elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                    inline_tm = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_tm_b1 = '–¥–æ 13:00'
                    inline_tm_b2 = '–¥–æ 14:00'
                    inline_tm_b3 = '–¥–æ 15:00'
                    inline_tm_b4 = '–¥–æ 16:00'
                    inline_tm_b5 = '–¥–æ 17:00'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_tm.add(inline_tm_b1, inline_tm_b2).add(inline_tm_b3, inline_tm_b4).add(inline_tm_b5).add(menu_back_logistic)

                    res = 'timeship_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_tm)
                else:
                    inline_tm = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_tm_b1 = '–¥–æ 13:00'
                    inline_tm_b2 = '–¥–æ 14:00'
                    inline_tm_b3 = '–¥–æ 15:00'
                    inline_tm_b4 = '–¥–æ 16:00'
                    inline_tm_b5 = '–¥–æ 17:00'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_tm.add(inline_tm_b1, inline_tm_b2).add(inline_tm_b3, inline_tm_b4).add(inline_tm_b5).add(
                        menu_back_logistic)

                    res = 'timeship_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–µ:', reply_markup=inline_tm)
            elif 'timeship_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                sec_res = th_res + '_' + str(message.text)
                first_res = sec_res.split('_')
                del first_res[0]

                if first_res[0] == '–ó–∞–±–æ—Ä':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(menu_back_logistic)

                    res = 'adressn_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == 'FBS':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–õ–µ–Ω–∏–Ω–∞ 128 (CDEK)'
                    inline_ad_b2 = '–ì–∞—Ñ—É—Ä–∏ 101 (–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç)'
                    inline_ad_b3 = '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è 15 (OZON)'
                    inline_ad_b4 = '–ö–∞—Ä—å–µ—Ä–Ω–∞—è 7 —Å—Ç7 (OZON)'
                    inline_ad_b5 = '–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è 2–ê (Wildberries)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(inline_ad_b3).add(inline_ad_b4).add(inline_ad_b5).add(menu_back_logistic)

                    res = 'adressn_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == 'FBO':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–ö–∞—Ä—å–µ—Ä–Ω–∞—è 7 —Å—Ç7 (OZON)'
                    inline_ad_b2 = '–ú–æ–∫—Ä–æ—É—Å–æ–≤—Å–∫–∞—è 8–≥ (Wildberries)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(menu_back_logistic)

                    res = 'adressn_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(menu_back_logistic)

                    res = 'adressn_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == '–í–æ–∑–≤—Ä–∞—Ç—ã':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(menu_back_logistic)

                    res = 'adressn_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                elif first_res[0] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è':
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    inline_ad_b4 = '–°–∏–ª–∏–∫–∞—Ç–Ω–∞—è 28–ë (–û—Ñ–∏—Å)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(inline_ad_b4).add(menu_back_logistic)

                    res = 'adressn_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
                else:
                    inline_ad = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_ad_b1 = '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)'
                    inline_ad_b2 = '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)'
                    inline_ad_b4 = '–°–∏–ª–∏–∫–∞—Ç–Ω–∞—è 28–ë (–û—Ñ–∏—Å)'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_ad.add(inline_ad_b1).add(inline_ad_b2).add(inline_ad_b4).add(menu_back_logistic)

                    res = 'adressn_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_ad)
            elif 'adressn_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                sec_res = th_res + '_' + str(message.text)
                first_res = sec_res.split('_')
                del first_res[0]

                if message.text == '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)':
                    inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_phone_b2 = '8-996-102-04-54 –ê–Ω—É–∞—Ä'
                    inline_phone_b4 = '8-995-948-29-00 –†–∞—Ö–º–∞–Ω'
                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_phone.add(inline_phone_b2).add(inline_phone_b4).add(menu_back_logistic)
                    res = 'phonen_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                elif message.text == '–õ–µ–Ω–∏–Ω–∞ 128 (CDEK)' or message.text == '–ì–∞—Ñ—É—Ä–∏ 101 (–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç)' or message.text == '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∞—è 15 (OZON)' or message.text == '–ö–∞—Ä—å–µ—Ä–Ω–∞—è 7 —Å—Ç7 (OZON)' or message.text == '–ú–æ–∫—Ä–æ—É—Å–æ–≤—Å–∫–∞—è 8–≥ (Wildberries)' or message.text == '–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è 2–ê (Wildberries)':
                    res = 'comment_' + '_'.join(first_res) + '_–ù–µ—Ç –Ω–æ–º–µ—Ä–∞'
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=markups.back_logistic)
                elif message.text == '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)':
                    inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_phone_b1 = '8-986-702-18-15 –ù—É—Ä–∏—Å–ª–∞–º'
                    inline_phone_b2 = '8-987-351-37-49 –†–∞–º–∏–ª—å'

                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_phone.add(inline_phone_b1).add(inline_phone_b2).add(menu_back_logistic)
                    res = 'phonen_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                elif message.text == '–°–∏–ª–∏–∫–∞—Ç–Ω–∞—è 28–ë (–û—Ñ–∏—Å)':
                    inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                    inline_phone_b1 = '8-987-256-07-06 –†–æ–º–∞–Ω'
                    inline_phone_b2 = '8-917-782-17-21 –ê–π–Ω—É—Ä'

                    menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                    inline_phone.add(inline_phone_b1).add(inline_phone_b2).add(menu_back_logistic)
                    res = 'phonen_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                else:
                    res = 'phonen_' + '_'.join(first_res)
                    update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è –¥–ª—è —Å–≤—è–∑–∏ –Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–µ:', reply_markup=markups.back_logistic)
            elif 'phonen_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                sec_res = th_res + '_' + str(message.text)
                first_res = sec_res.split('_')
                del first_res[0]

                res = 'comment_' + '_'.join(first_res)
                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', reply_markup=markups.back_logistic)
            elif 'comment_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                first_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')
                type_ship = first_res[1]
                date_ship = first_res[2]
                num_ship = first_res[3]
                item_ship = first_res[4]
                count_item_ship = first_res[5]
                w_ship = first_res[6]
                adress_begin = first_res[7]
                phone_begin = first_res[8]
                time_ship = first_res[9]
                adress_end = first_res[10]
                phone_end = first_res[11]
                comment_ship = message.text
                update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)

                create(f"REPLACE INTO shipping(type_ship, date_ship, num_ship, item_ship, count_item_ship, w_ship, adress_begin, phone_begin, time_ship, adress_end, phone_end, comment_ship) VALUES ('{type_ship}', '{date_ship}', '{num_ship}', '{item_ship}', '{count_item_ship}', '{w_ship}', '{adress_begin}', '{phone_begin}', '{time_ship}', '{adress_end}', '{phone_end}', '{comment_ship}')", user)

                list_all_users = selist(f"SELECT * FROM users", user)
                list_user = []
                for us in list_all_users:
                    if 'log' in us['notif']:
                        list_user.append(us)

                for user1 in list_user:
                    try:
                        chat_id = str(user1["id_user"])
                        destination_bot = Bot(token='6490496152:AAHnBwfDRlUTyTFMOMGGCK6Eu3WejYpesIE')
                        await destination_bot.send_message(chat_id, f'*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*\n\n'
                                                                    f'–¢–∏–ø: *{type_ship}*\n'
                                                                    f'–î–∞—Ç–∞: *{date_ship}*\n'
                                                                    f'–í—Ä–µ–º—è: *{time_ship}*\n'
                                                                    f'–ü—Ä–µ–¥–º–µ—Ç: *{item_ship}*\n'
                                                                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{count_item_ship}*\n'
                                                                    f'–í–µ—Å: *{w_ship}*\n\n'
                                                                    f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{adress_begin}*\n'
                                                                    f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{adress_end}*\n'
                                                                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{comment_ship}*\n', parse_mode='Markdown')
                    except:
                        pass

                await message.answer(text='–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=markups.menu_logistic)

            # –ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
            elif message.text == markups.menu_logistic_b6:
                if len(selist(f"SELECT * FROM shipping WHERE (type_ship = '–î–æ—Å—Ç–∞–≤–∫–∞' AND status_ship <> '–û—Ç–º–µ–Ω–µ–Ω') AND (type_ship = '–î–æ—Å—Ç–∞–≤–∫–∞' AND status_ship <> '–ó–∞–∫–æ–Ω—á–µ–Ω')", user)) != 0:
                    await message.answer(text='*–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:*', reply_markup=markups.back_logistic, parse_mode='Markdown')
                    newlist = selist(f"SELECT * FROM shipping WHERE (type_ship = '–î–æ—Å—Ç–∞–≤–∫–∞' AND status_ship <> '–û—Ç–º–µ–Ω–µ–Ω') AND (type_ship = '–î–æ—Å—Ç–∞–≤–∫–∞' AND status_ship <> '–ó–∞–∫–æ–Ω—á–µ–Ω')", user)

                    list_log = sorted(newlist, key=lambda d: d['num_ship'])
                    for l in list_log:
                        inline_m = InlineKeyboardMarkup(row_width=2)
                        inline_m_b1 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'logisnoyes_{l["id_ship"]}')
                        inline_m.add(inline_m_b1)
                        await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                  f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown',
                                             reply_markup=inline_m)
                else:
                    await message.answer(text='–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!')

            # –ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–±–æ—Ä
            elif message.text == markups.menu_logistic_b7:
                if len(selist(f"SELECT * FROM shipping WHERE (type_ship = '–ó–∞–±–æ—Ä' AND status_ship <> '–û—Ç–º–µ–Ω–µ–Ω') AND (type_ship = '–ó–∞–±–æ—Ä' AND status_ship <> '–ó–∞–∫–æ–Ω—á–µ–Ω')", user)) != 0:
                    await message.answer(text='*–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–±–æ—Ä:*', reply_markup=markups.back_logistic, parse_mode='Markdown')
                    newlist = selist(f"SELECT * FROM shipping WHERE (type_ship = '–ó–∞–±–æ—Ä' AND status_ship <> '–û—Ç–º–µ–Ω–µ–Ω') AND (type_ship = '–ó–∞–±–æ—Ä' AND status_ship <> '–ó–∞–∫–æ–Ω—á–µ–Ω')", user)

                    list_log = sorted(newlist, key=lambda d: d['num_ship'])
                    for l in list_log:
                        inline_m = InlineKeyboardMarkup(row_width=2)
                        inline_m_b1 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'logisnoyes_{l["id_ship"]}')
                        inline_m.add(inline_m_b1)
                        await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                  f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown',
                                             reply_markup=inline_m)
                else:
                    await message.answer(text='–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!')

            # –ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç
            elif message.text == markups.menu_logistic_b2:
                update(f"UPDATE users SET act_log = 'numd_' WHERE id_user = '{user}'", user)

                inline_date = ReplyKeyboardMarkup(resize_keyboard=True)
                inline_date_b1 = f'{sk.date_create()}'
                inline_date_b2 = f'{sk.date_tomorrow_create()}'
                menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                inline_date.add(inline_date_b1, inline_date_b2).add(menu_back_logistic)

                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É', reply_markup=inline_date)
            elif 'newz_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                phone_begin = message.text
                date_ship = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')[1]
                if selone(f"SELECT date_work FROM work_ship_begin WHERE date_work = '{message.text}'", user) is None:
                    create(f"REPLACE INTO shipping(type_ship, date_ship, num_ship, item_ship, count_item_ship, w_ship, adress_begin, phone_begin, time_ship, adress_end, phone_end, comment_ship) VALUES ('FBS', '{date_ship}', 0, '–ú–µ–±–µ–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)', '{phone_begin}', '—Å 10:00 –¥–æ 13:00', '–ì–∞—Ñ—É—Ä–∏ 101 (–Ø–Ω–¥–µ–∫—Å –ú–∞—Ä–∫–µ—Ç)', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞', '–£—Å–ø–µ—Ç—å —Å–¥–∞—Ç—å –¥–æ 18:00')", user)
                    create(f"REPLACE INTO shipping(type_ship, date_ship, num_ship, item_ship, count_item_ship, w_ship, adress_begin, phone_begin, time_ship, adress_end, phone_end, comment_ship) VALUES ('FBS', '{date_ship}', 0, '–ö—Ä–∞—Å–∫–∞', 1, '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ì–ª–∞–∑–æ–≤—Å–∫–∞—è 24/1 —Å—Ç3 (–ö–æ–ª–æ—Ä –¶–µ–Ω—Ç—Ä)', '89872553335', '—Å 10:00 –¥–æ 13:00', '–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è 2–ê (Wildberries)', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞', '–£—Å–ø–µ—Ç—å —Å–¥–∞—Ç—å –¥–æ 18:00')", user)
                    create(f"REPLACE INTO shipping(type_ship, date_ship, num_ship, item_ship, count_item_ship, w_ship, adress_begin, phone_begin, time_ship, adress_end, phone_end, comment_ship) VALUES ('FBS', '{date_ship}', 0, '–ú–µ–±–µ–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)', '{phone_begin}', '—Å 10:00 –¥–æ 13:00', '–≠–ª–µ–∫—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∞—è 2–ê (Wildberries)', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞', '–£—Å–ø–µ—Ç—å —Å–¥–∞—Ç—å –¥–æ 18:00')", user)
                    create(f"REPLACE INTO shipping(type_ship, date_ship, num_ship, item_ship, count_item_ship, w_ship, adress_begin, phone_begin, time_ship, adress_end, phone_end, comment_ship) VALUES ('FBS', '{date_ship}', 0, '–ú–µ–±–µ–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–ê—Ä–∞–ª—å—Å–∫–∞—è 47 (–ú–µ–±–µ–ª—å–Ω—ã–π —Ü–µ—Ö)', '{phone_begin}', '—Å 10:00 –¥–æ 13:00', '–ö–∞—Ä—å–µ—Ä–Ω–∞—è 7 —Å—Ç7 (OZON)', '–ù–µ—Ç –Ω–æ–º–µ—Ä–∞', '–£—Å–ø–µ—Ç—å —Å–¥–∞—Ç—å –¥–æ 13:00')", user)
                    create(f"REPLACE INTO work_ship_begin(date_work) VALUES ('{date_ship}')", user)
                list_log = selist(f"SELECT * FROM shipping WHERE date_ship = '{date_ship}' AND status_ship = '–í –æ—á–µ—Ä–µ–¥–∏'", user)
                await message.answer(text='<b>–ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>', reply_markup=markups.back_logistic)
                update(f"UPDATE users SET act_log = '100' WHERE id_user = '{user}'", user)
                update(f"UPDATE users SET count_logis = 0 WHERE id_user = '{user}'", user)
                for l in list_log:
                    inline_m = InlineKeyboardMarkup(row_width=2)
                    inline_m_b1 = InlineKeyboardButton(text='–í –æ—á–µ—Ä–µ–¥—å', callback_data=f'logis_{date_ship}_{l["id_ship"]}')
                    inline_m_b3 = InlineKeyboardButton(text='–ü–µ—Ä–µ–Ω–æ—Å', callback_data=f'edite_{l["id_ship"]}')
                    inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'logisnoyes_{l["id_ship"]}')
                    inline_m.add(inline_m_b1).add(inline_m_b3).add(inline_m_b2)
                    await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                              f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                              f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n', parse_mode='Markdown',
                                         reply_markup=inline_m)
            elif 'numd_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                if len(message.text.split('.')) == 3 and len(message.text) == 10:
                    list_chek = selist(f"SELECT * FROM shipping WHERE date_ship = '{message.text}'", user)

                    list_log = selist(f"SELECT * FROM shipping WHERE date_ship = '{message.text}' AND status_ship = '–í –æ—á–µ—Ä–µ–¥–∏'", user)
                    if selone(f"SELECT date_work FROM work_ship WHERE date_work = '{message.text}'", user) is None:
                        inline_phone = ReplyKeyboardMarkup(resize_keyboard=True)
                        inline_phone_b2 = '8-996-102-04-54 –ê–Ω—É–∞—Ä'
                        inline_phone_b4 = '8-995-948-29-00 –†–∞—Ö–º–∞–Ω'
                        menu_back_logistic = '‚ùå –û—Ç–º–µ–Ω–∞'
                        inline_phone.add(inline_phone_b2).add(inline_phone_b4).add(menu_back_logistic)
                        res = f'newz_{message.text}'
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –§–§ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–Ω–æ–π:', reply_markup=inline_phone)
                    else:
                        await message.answer(text='<b>–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:</b>', reply_markup=markups.back_logistic)
                        newlist = selist(f"SELECT * FROM shipping WHERE date_ship = '{message.text}'", user)
                        list_log = sorted(newlist, key=lambda d: d['num_ship'])
                        for l in list_log:
                            if l["status_ship"] == '–û—Ç–º–µ–Ω–µ–Ω' or l["status_ship"] == '–ó–∞–∫–æ–Ω—á–µ–Ω':
                                await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                          f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                          f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                          f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                          f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                          f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                          f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                          f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                          f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                          f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown')
                            else:
                                inline_m = InlineKeyboardMarkup(row_width=2)
                                inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'logisno_{l["id_ship"]}')
                                inline_m_b3 = InlineKeyboardButton(text='–ü–µ—Ä–µ–Ω–æ—Å', callback_data=f'edite_{l["id_ship"]}')
                                inline_m.add(inline_m_b2).add(inline_m_b3)
                                await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                          f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                          f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                          f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                          f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                          f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                          f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                          f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                          f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                          f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)


                else:
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É')
            elif 'edite_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                callback_data = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                list_call = callback_data.split('_')
                id_ship = list_call[1]
                if len(message.text.split('.')) == 3 and len(message.text) == 10:
                    delta_1 = datetime.timedelta(hours=5)
                    now = datetime.datetime.now() + delta_1

                    if ((int(message.text[0:2]) < int(now.day)) and (int(message.text[3:5]) == int(now.month))) or (
                            int(message.text[3:5]) < int(now.month)):
                        await message.answer(text='–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:')

                    elif (int(message.text[0:2]) == int(now.day)) and (int(sk.time_create()[0:2]) > 18):
                        await message.answer(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:')

                    else:
                        update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                        update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                        update(f"UPDATE shipping SET date_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)
                        update(f"UPDATE shipping SET num_ship = 0 WHERE id_ship = '{id_ship}'", user)
                        update(f"UPDATE shipping SET status_ship = '–í –æ—á–µ—Ä–µ–¥–∏' WHERE id_ship = '{id_ship}'", user)

                        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

                        list_all_users = selist(f"SELECT * FROM users", user)
                        list_user = []
                        for us in list_all_users:
                            if 'log' in us['notif']:
                                list_user.append(us)
                        for user1 in list_user:
                            try:
                                chat_id = str(user1["id_user"])
                                destination_bot = Bot(token='6490496152:AAHnBwfDRlUTyTFMOMGGCK6Eu3WejYpesIE')
                                await destination_bot.send_message(chat_id, f'–ò–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–∞—Ç–∞ —É –∑–∞—è–≤–∫–∏ —Å ID: {id_ship}!\n\n'
                                                                            f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                                            f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                                            f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                                            f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                                            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                                            f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                                            f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                                            f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                                            f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                                            f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                                            f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                                            f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*')
                            except:
                                pass

                        await message.answer(text='–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=markups.menu_log_n)

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            elif message.text == markups.menu_logistic_b5:
                update(f"UPDATE users SET act_log = 'edit_' WHERE id_user = '{user}'", user)
                await message.answer(text='–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏:', reply_markup=markups.back_logistic)
            elif 'edit_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                if message.text.isdigit():
                    list_chek = selist(f"SELECT * FROM shipping WHERE id_ship = '{int(message.text)}'", user)
                    if len(list_chek) != 0:
                        update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                        l = list_chek[0]
                        inline_m = InlineKeyboardMarkup(row_width=2)
                        inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                        inline_m.add(inline_m_b1)
                        await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n', parse_mode='Markdown', reply_markup=inline_m)
                    else:
                        await message.answer(text=f'–ó–∞—è–≤–∫–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID', parse_mode='Markdown')
                else:
                    await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ ID —á–∏—Å–ª–æ–º!', parse_mode='Markdown')
            elif 'logised_' in selone(f"SELECT edit_log FROM users WHERE id_user = '{user}'", user)['edit_log']:
                callback_data = selone(f"SELECT edit_log FROM users WHERE id_user = '{user}'", user)['edit_log']
                list_call = callback_data.split('_')
                val_edit = list_call[1]
                id_ship = list_call[2]

                inline_m = InlineKeyboardMarkup(row_width=2)
                inline_m_b8 = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'logisedit_{id_ship}')
                inline_m.add(inline_m_b8)

                if val_edit == '–¥–∞—Ç–∞':
                    if len(message.text.split('.')) == 3 and len(message.text) == 10:
                        delta_1 = datetime.timedelta(hours=5)
                        now = datetime.datetime.now() + delta_1

                        if ((int(message.text[0:2]) < int(now.day)) and (int(message.text[3:5]) == int(now.month))) or (
                                int(message.text[3:5]) < int(now.month)):
                            await message.answer(text='–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:',
                                                 reply_markup=inline_m)

                        elif (int(message.text[0:2]) == int(now.day)) and (int(sk.time_create()[0:2]) > 18):
                            await message.answer(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:',
                                                 reply_markup=inline_m)

                        else:
                            update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                            update(f"UPDATE shipping SET date_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                            l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                            inline_m = InlineKeyboardMarkup(row_width=2)
                            inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                            inline_m.add(inline_m_b1)
                            await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                      f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                      f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                      f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                      f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                      f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                      f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                                      f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                                      f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                      f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)


                elif val_edit == '–≤—Ä–µ–º—è':
                    update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                    update(f"UPDATE shipping SET time_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                    l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                    inline_m = InlineKeyboardMarkup(row_width=2)
                    inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                    inline_m.add(inline_m_b1)
                    await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                              f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)

                elif val_edit == '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
                    if message.text.isdigit():
                        if int(message.text) > 0:
                            update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                            update(f"UPDATE shipping SET count_item_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                            l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                            inline_m = InlineKeyboardMarkup(row_width=2)
                            inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                            inline_m.add(inline_m_b1)
                            await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                      f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                      f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                      f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                      f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                      f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                      f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                                      f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                                      f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                      f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                        else:
                            await message.answer(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è:')
                    else:
                        await message.answer(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º:')

                elif val_edit == '–≤–µ—Å':
                    update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                    update(f"UPDATE shipping SET w_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                    l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                    inline_m = InlineKeyboardMarkup(row_width=2)
                    inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                    inline_m.add(inline_m_b1)
                    await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                              f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                elif val_edit == '–∞–¥—Ä–µ—Å–∑':
                    update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                    update(f"UPDATE shipping SET adress_begin = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                    l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                    inline_m = InlineKeyboardMarkup(row_width=2)
                    inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                    inline_m.add(inline_m_b1)
                    await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                              f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                elif val_edit == '–∞–¥—Ä–µ—Å—Ä':
                    update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                    update(f"UPDATE shipping SET adress_end = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                    l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                    inline_m = InlineKeyboardMarkup(row_width=2)
                    inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                    inline_m.add(inline_m_b1)
                    await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                              f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                elif val_edit == '–∫–æ–º–º–µ–Ω—Ç':
                    update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                    update(f"UPDATE shipping SET comment_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                    l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                    inline_m = InlineKeyboardMarkup(row_width=2)
                    inline_m_b1 = InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'logisedit_{l["id_ship"]}')
                    inline_m.add(inline_m_b1)
                    await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{l["adress_begin"]}*\n'
                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{l["adress_end"]}*\n'
                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                              f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)

            # –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è
            elif selone(f"SELECT new_name_user FROM users WHERE id_user = '{user}'", user)['new_name_user'] == 100:
                update(f"UPDATE users SET new_name_user = 0 WHERE id_user = '{user}'", user)
                update(f"UPDATE users SET name_new_user = '{message.text}' WHERE id_user = '{user}'", user)
                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=markups.inline_add_dr)
            elif selone(f"SELECT new_id_user FROM users WHERE id_user = '{user}'", user)['new_id_user'] == 100:
                if message.text.isdigit():
                    update(f"UPDATE users SET new_id_user = 0 WHERE id_user = '{user}'", user)
                    update(f"UPDATE users SET new_id_user_text = '{message.text}' WHERE id_user = '{user}'", user)
                    update(f"UPDATE users SET new_name_user = 100 WHERE id_user = '{user}'", user)
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
                else:
                    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–∏—Å–ª–æ–º:')
            elif message.text == markups.menu_logistic_b3:
                update(f"UPDATE users SET new_id_user = 100 WHERE id_user = '{user}'", user)
                await message.answer(
                    "–ü—Ä–∏—à–ª–∏—Ç–µ <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <i>(–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /info)</i>", )
                await message.answer(text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'", reply_markup=markups.back_logistic)

            # –£–¥–∞–ª–∏—Ç—å –≤–∞–¥–∏—Ç–µ–ª—è
            elif selone(f"SELECT remove_user FROM users WHERE id_user = '{user}'", user)['remove_user'] == 100:
                if message.text.isdigit():
                    check = 0
                    search = selist(f"SELECT id_user, name_user FROM users WHERE company = '–í–æ–¥–∏—Ç–µ–ª—å'", user)
                    for i in search:
                        if int(message.text) == int(i['id_user']):
                            check = 1
                    if check == 1:
                        update(f"UPDATE users SET remove_user = 0 WHERE id_user = '{user}'", user)
                        update(f"DELETE FROM users WHERE id_user = '{message.text}'", user)
                        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω", reply_markup=markups.menu_logistic)
                    else:
                        await message.answer(
                            text='–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:')
                else:
                    await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ <b>id</b> —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–∏—Å–ª–æ–º:')
            elif message.text == markups.menu_logistic_b4:
                update(f"UPDATE users SET remove_user = 100 WHERE id_user = '{user}'", user)
                search = selist(f"SELECT id_user, name_user, company FROM users WHERE company = '–í–æ–¥–∏—Ç–µ–ª—å'", user)
                res = ''
                for i in search:
                    res += str(i['id_user']) + " - "
                    res += i['name_user'] + "\n"
                await message.answer(res)
                await message.answer('–í–≤–µ–¥–∏—Ç–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
                await message.answer(text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'", reply_markup=markups.back_logistic)

            # –ù–µ –ø–æ–Ω—è—Ç–Ω–æ
            else:
                await message.answer(text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª', reply_markup=markups.menu_admin)



if __name__ == '__main__':
    executor.start_polling(db, on_startup=startup, skip_updates=True)